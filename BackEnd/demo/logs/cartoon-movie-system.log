2025-06-22 18:56:17 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:56:17 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 18:56:17 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 18:56:17 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 18:56:17 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 18:56:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:56:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:56:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 18:56:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 18:56:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 18:56:17 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:56:17 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 18:56:17 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:56:17 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:56:17 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@e9dc2e, isDisliked=false, dislikeCount=0, isLiked=false, li (truncated)...]
2025-06-22 18:56:17 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@113245e9, com.example.demo.dto.CommentDTO@433afbbb]]
2025-06-22 18:56:18 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@4b59c4c2, com.example.demo.dto.CommentDTO@2ad77b3c]]
2025-06-22 18:56:18 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:03 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 18:58:03 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 18:58:03 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 18:58:03 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 18:58:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 18:58:03 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 18:58:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 18:58:03 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:03 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 18:58:03 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:03 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:03 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@9b490, isDisliked=false, dislikeCount=0, isLiked=false, lik (truncated)...]
2025-06-22 18:58:03 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:04 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 18:58:04 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 18:58:04 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 18:58:04 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 18:58:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 18:58:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 18:58:04 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 18:58:04 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:04 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 18:58:04 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:04 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@666de82c, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 18:58:04 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:04 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@68889a61, com.example.demo.dto.CommentDTO@2c48e4e3]]
2025-06-22 18:58:05 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@122468da, com.example.demo.dto.CommentDTO@6a3ed244]]
2025-06-22 18:58:05 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:09 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 18:58:09 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 18:58:09 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 18:58:09 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 18:58:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 18:58:09 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 18:58:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 18:58:09 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:09 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 18:58:09 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:09 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:09 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@359f31c8, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 18:58:09 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@780d8b75, com.example.demo.dto.CommentDTO@75670d18]]
2025-06-22 18:58:10 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@e5b356a, com.example.demo.dto.CommentDTO@76f09459]]
2025-06-22 18:58:10 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:15 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/2/comments", parameters={}
2025-06-22 18:58:15 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#createComment(Long, Map)
2025-06-22 18:58:15 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{content=1, rating=5}]
2025-06-22 18:58:15 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:15 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{error=Bạn cần đăng nhập để bình luận}]
2025-06-22 18:58:15 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 401 UNAUTHORIZED
2025-06-22 18:58:17 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/auth/login", parameters={}
2025-06-22 18:58:17 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.AuthController#login(AuthRequest)
2025-06-22 18:58:17 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [com.example.demo.dto.AuthRequest@5e930fd7]
2025-06-22 18:58:17 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:17 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:17 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 18:58:17 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 18:58:17 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 18:58:17 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:17 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{message=Login success, user={role=ADMIN, fullName=Lương Quang Dũng, id=13, avatar=L, email=quangdun (truncated)...]
2025-06-22 18:58:17 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:18 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/auth/login", parameters={}
2025-06-22 18:58:18 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.AuthController#login(AuthRequest)
2025-06-22 18:58:18 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [com.example.demo.dto.AuthRequest@1ff419b]
2025-06-22 18:58:18 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:18 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:18 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 18:58:18 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 18:58:18 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 18:58:18 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:18 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{message=Login success, user={role=ADMIN, fullName=Lương Quang Dũng, id=13, avatar=L, email=quangdun (truncated)...]
2025-06-22 18:58:18 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:20 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 18:58:20 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 18:58:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:20 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 18:58:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:20 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:20 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@737093dc, com.example.demo.entity.Cartoon@1a178cfb, com.example.dem (truncated)...]
2025-06-22 18:58:20 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications", parameters={}
2025-06-22 18:58:20 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications/unread-count", parameters={}
2025-06-22 18:58:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getNotifications()
2025-06-22 18:58:20 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getUnreadCount()
2025-06-22 18:58:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(n) 
    FROM
        Notification n 
    WHERE
        n.user = :user 
        AND n.isRead = false */ select
            count(n1_0.id) 
        from
            notifications n1_0 
        where
            n1_0.user_id=? 
            and n1_0.is_read=0
2025-06-22 18:58:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.user_id 
    from
        notifications n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc
2025-06-22 18:58:20 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:20 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [0]
2025-06-22 18:58:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[]]
2025-06-22 18:58:20 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/user-achievements/username/QuangDung1204/check-achievements", parameters={}
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#checkAchievementsByUsername(String)
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{userId=13, message=Achievements checked and updated, success=true}]
2025-06-22 18:58:20 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 18:58:20 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 18:58:21 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:22 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3", parameters={}
2025-06-22 18:58:22 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/episodes", parameters={}
2025-06-22 18:58:22 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 18:58:22 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 18:58:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:22 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:22 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 18:58:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 18:58:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 18:58:22 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:22 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=3, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be/03 (truncated)...]
2025-06-22 18:58:22 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:22 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:22 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@f082bdc, isDisliked=false, dislikeCount=0, isLiked=false, l (truncated)...]
2025-06-22 18:58:22 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:22 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 18:58:22 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:58:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:58:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:22 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:58:22 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:22 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@22432e4b]]
2025-06-22 18:58:22 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:22 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 18:58:22 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:58:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:58:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:58:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:58:22 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:22 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@68469b11]]
2025-06-22 18:58:22 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:58 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 18:58:58 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 18:58:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:58 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:58 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:58 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@57ff84b1, com.example.demo.entity.Cartoon@43e4bd7d, com.example.dem (truncated)...]
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:58 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications/unread-count", parameters={}
2025-06-22 18:58:58 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:58 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications", parameters={}
2025-06-22 18:58:58 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getUnreadCount()
2025-06-22 18:58:58 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getNotifications()
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/user-achievements/username/QuangDung1204/check-achievements", parameters={}
2025-06-22 18:58:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#checkAchievementsByUsername(String)
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(n) 
    FROM
        Notification n 
    WHERE
        n.user = :user 
        AND n.isRead = false */ select
            count(n1_0.id) 
        from
            notifications n1_0 
        where
            n1_0.user_id=? 
            and n1_0.is_read=0
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.user_id 
    from
        notifications n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc
2025-06-22 18:58:58 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:58 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [0]
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:58 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:58 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[]]
2025-06-22 18:58:58 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{userId=13, message=Achievements checked and updated, success=true}]
2025-06-22 18:58:58 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 18:58:58 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 18:58:59 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:59 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 18:58:59 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 18:58:59 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 18:58:59 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 18:58:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:58:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 18:58:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 18:58:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 18:58:59 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:59 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 18:58:59 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:58:59 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:58:59 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@64adb06f, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 18:58:59 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@65edd160, com.example.demo.dto.CommentDTO@56afeb5a]]
2025-06-22 18:59:00 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@7f20e747, com.example.demo.dto.CommentDTO@44769328]]
2025-06-22 18:59:00 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/comments/11/like", parameters={}
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#likeComment(Long, Map)
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{isLiked=true}]
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.cartoon_id,
        c2_0.id,
        c2_0.actors,
        c2_0.created_at,
        c2_0.description,
        c2_0.director,
        c2_0.duration,
        c2_0.genre,
        c2_0.image_url,
        c2_0.release_year,
        c2_0.status,
        c2_0.title,
        c2_0.total_episodes,
        c2_0.trailer_url,
        c2_0.video_url,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        c3_0.id,
        c3_0.actors,
        c3_0.created_at,
        c3_0.description,
        c3_0.director,
        c3_0.duration,
        c3_0.genre,
        c3_0.image_url,
        c3_0.release_year,
        c3_0.status,
        c3_0.title,
        c3_0.total_episodes,
        c3_0.trailer_url,
        c3_0.video_url,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    join
        cartoonn c2_0 
            on c2_0.id=c1_0.cartoon_id 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        cartoonn c3_0 
            on c3_0.id=pc1_0.cartoon_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.id=?
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.comment_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.user_id 
    from
        comment_likes cl1_0 
    where
        cl1_0.comment_id=? 
        and cl1_0.user_id=?
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* delete for com.example.demo.entity.CommentLike */delete 
    from
        comment_likes 
    where
        id=?
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.comment_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.user_id 
    from
        comment_likes cl1_0 
    where
        cl1_0.comment_id=? 
        and cl1_0.user_id=?
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{isDisliked=false, dislikeCount=0, isLiked=false, likeCount=0}]
2025-06-22 18:59:47 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@7f0f6344, com.example.demo.dto.CommentDTO@19cbe42f]]
2025-06-22 18:59:47 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/comments/11/like", parameters={}
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#likeComment(Long, Map)
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{isLiked=true}]
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.cartoon_id,
        c2_0.id,
        c2_0.actors,
        c2_0.created_at,
        c2_0.description,
        c2_0.director,
        c2_0.duration,
        c2_0.genre,
        c2_0.image_url,
        c2_0.release_year,
        c2_0.status,
        c2_0.title,
        c2_0.total_episodes,
        c2_0.trailer_url,
        c2_0.video_url,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        c3_0.id,
        c3_0.actors,
        c3_0.created_at,
        c3_0.description,
        c3_0.director,
        c3_0.duration,
        c3_0.genre,
        c3_0.image_url,
        c3_0.release_year,
        c3_0.status,
        c3_0.title,
        c3_0.total_episodes,
        c3_0.trailer_url,
        c3_0.video_url,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    join
        cartoonn c2_0 
            on c2_0.id=c1_0.cartoon_id 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        cartoonn c3_0 
            on c3_0.id=pc1_0.cartoon_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.id=?
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.comment_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.user_id 
    from
        comment_likes cl1_0 
    where
        cl1_0.comment_id=? 
        and cl1_0.user_id=?
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.demo.entity.CommentLike */insert 
    into
        comment_likes (comment_id, created_at, is_liked, user_id) 
    values
        (?, ?, ?, ?)
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.comment_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.user_id 
    from
        comment_likes cl1_0 
    where
        cl1_0.comment_id=? 
        and cl1_0.user_id=?
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{isDisliked=false, dislikeCount=0, isLiked=true, likeCount=1}]
2025-06-22 18:59:48 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5f502c10, com.example.demo.dto.CommentDTO@56632531]]
2025-06-22 18:59:48 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:49 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/2/comments", parameters={}
2025-06-22 18:59:49 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#createComment(Long, Map)
2025-06-22 18:59:49 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{content=1, rating=5}]
2025-06-22 18:59:49 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:49 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{error=Bạn cần đăng nhập để bình luận}]
2025-06-22 18:59:49 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 401 UNAUTHORIZED
2025-06-22 18:59:55 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/auth/me", parameters={}
2025-06-22 18:59:55 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.AuthController#getCurrentUser()
2025-06-22 18:59:55 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:55 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{error=Không có phiên đăng nhập}]
2025-06-22 18:59:55 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 401 UNAUTHORIZED
2025-06-22 18:59:55 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 18:59:55 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 18:59:55 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 18:59:55 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 18:59:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:59:55 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:59:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 18:59:55 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 18:59:55 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 18:59:55 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:55 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 18:59:55 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:55 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:55 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@45734c5b, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 18:59:55 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1f90f0aa, com.example.demo.dto.CommentDTO@19967489]]
2025-06-22 18:59:55 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5623e8f4, com.example.demo.dto.CommentDTO@615e80b3]]
2025-06-22 18:59:55 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:56 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/auth/me", parameters={}
2025-06-22 18:59:56 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.AuthController#getCurrentUser()
2025-06-22 18:59:56 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:56 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{error=Không có phiên đăng nhập}]
2025-06-22 18:59:56 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 401 UNAUTHORIZED
2025-06-22 18:59:56 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 18:59:56 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 18:59:56 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 18:59:56 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 18:59:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:59:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:59:56 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 18:59:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 18:59:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 18:59:56 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:56 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 18:59:56 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:56 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:56 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@7d1f015d, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 18:59:56 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@2f165b1d, com.example.demo.dto.CommentDTO@5bf1cdcf]]
2025-06-22 18:59:56 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@703b6cb1, com.example.demo.dto.CommentDTO@473a094f]]
2025-06-22 18:59:56 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:17 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/auth/me", parameters={}
2025-06-22 19:00:17 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.AuthController#getCurrentUser()
2025-06-22 19:00:17 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:17 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{error=Không có phiên đăng nhập}]
2025-06-22 19:00:17 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 401 UNAUTHORIZED
2025-06-22 19:00:17 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:00:17 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:00:17 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:00:17 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:00:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:00:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:00:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:00:17 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:17 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:00:17 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:17 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:17 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@46bf5781, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:00:17 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@e903680, com.example.demo.dto.CommentDTO@71cb95cd]]
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@6308c87c, com.example.demo.dto.CommentDTO@7272cc6b]]
2025-06-22 19:00:18 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:18 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:19 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/auth/me", parameters={}
2025-06-22 19:00:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.AuthController#getCurrentUser()
2025-06-22 19:00:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{error=Không có phiên đăng nhập}]
2025-06-22 19:00:19 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 401 UNAUTHORIZED
2025-06-22 19:00:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:00:19 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:00:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:00:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:00:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:00:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:00:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:00:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:00:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@68600afd, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:00:19 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5ab9686d, com.example.demo.dto.CommentDTO@5608eef6]]
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:20 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5be63295, com.example.demo.dto.CommentDTO@4d1cd392]]
2025-06-22 19:00:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:21 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/auth/me", parameters={}
2025-06-22 19:00:21 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.AuthController#getCurrentUser()
2025-06-22 19:00:21 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:21 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{error=Không có phiên đăng nhập}]
2025-06-22 19:00:21 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 401 UNAUTHORIZED
2025-06-22 19:00:21 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:00:21 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:00:21 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:00:21 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:00:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:00:21 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:00:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:00:21 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:21 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:00:21 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:21 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:21 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@7c1540b0, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:00:21 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@700eaf41, com.example.demo.dto.CommentDTO@7be5c565]]
2025-06-22 19:00:22 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@671d7ca5, com.example.demo.dto.CommentDTO@65df4556]]
2025-06-22 19:00:22 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:25 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/auth/me", parameters={}
2025-06-22 19:00:25 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.AuthController#getCurrentUser()
2025-06-22 19:00:25 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:25 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{error=Không có phiên đăng nhập}]
2025-06-22 19:00:25 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 401 UNAUTHORIZED
2025-06-22 19:00:25 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:00:25 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:00:25 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:00:25 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:00:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:25 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:00:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:00:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:00:25 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:25 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:00:25 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:25 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:25 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@13ec28b, isDisliked=false, dislikeCount=0, isLiked=false, l (truncated)...]
2025-06-22 19:00:25 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5c96b74d, com.example.demo.dto.CommentDTO@2baa8b6d]]
2025-06-22 19:00:25 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5d1ab29a, com.example.demo.dto.CommentDTO@45e73e79]]
2025-06-22 19:00:25 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:30 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/auth/login", parameters={}
2025-06-22 19:00:30 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.AuthController#login(AuthRequest)
2025-06-22 19:00:30 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [com.example.demo.dto.AuthRequest@68f3060f]
2025-06-22 19:00:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:00:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:00:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:00:30 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:30 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{message=Login success, user={role=ADMIN, fullName=Lương Quang Dũng, id=13, avatar=L, email=quangdun (truncated)...]
2025-06-22 19:00:30 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:32 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:00:32 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:00:32 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:32 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:32 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@5868ee0e, com.example.demo.entity.Cartoon@8571a65, com.example.demo (truncated)...]
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:32 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/user-achievements/username/QuangDung1204/check-achievements", parameters={}
2025-06-22 19:00:32 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications", parameters={}
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#checkAchievementsByUsername(String)
2025-06-22 19:00:32 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications/unread-count", parameters={}
2025-06-22 19:00:32 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getNotifications()
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:00:32 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getUnreadCount()
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:00:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(n) 
    FROM
        Notification n 
    WHERE
        n.user = :user 
        AND n.isRead = false */ select
            count(n1_0.id) 
        from
            notifications n1_0 
        where
            n1_0.user_id=? 
            and n1_0.is_read=0
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.user_id 
    from
        notifications n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc
2025-06-22 19:00:32 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:32 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [0]
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:00:32 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:32 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[]]
2025-06-22 19:00:32 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:32 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{userId=13, message=Achievements checked and updated, success=true}]
2025-06-22 19:00:32 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:00:32 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:00:33 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:34 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:00:34 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:00:34 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:00:34 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:00:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:34 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:00:34 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:00:34 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:00:34 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:34 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:00:34 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:34 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:34 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@8de7a29, isDisliked=false, dislikeCount=0, isLiked=false, l (truncated)...]
2025-06-22 19:00:34 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@56ea53df, com.example.demo.dto.CommentDTO@128d54f1]]
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:35 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@4238a7b4, com.example.demo.dto.CommentDTO@29a9b6e]]
2025-06-22 19:00:35 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:00:37 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/2/comments", parameters={}
2025-06-22 19:00:37 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#createComment(Long, Map)
2025-06-22 19:00:37 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{content=1, rating=5}]
2025-06-22 19:00:37 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:00:37 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{error=Bạn cần đăng nhập để bình luận}]
2025-06-22 19:00:37 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 401 UNAUTHORIZED
2025-06-22 19:02:03 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/auth/me", parameters={}
2025-06-22 19:02:03 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.AuthController#getCurrentUser()
2025-06-22 19:02:03 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:03 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{error=Không có phiên đăng nhập}]
2025-06-22 19:02:03 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 401 UNAUTHORIZED
2025-06-22 19:02:03 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:02:03 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:02:03 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:02:03 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:02:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:02:03 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:02:03 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:02:03 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:02:03 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:02:03 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:03 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:02:03 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:03 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:03 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@7f67da5d, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:02:03 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5c329d8b, com.example.demo.dto.CommentDTO@7b822796]]
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@613e0684, com.example.demo.dto.CommentDTO@2206a6a3]]
2025-06-22 19:02:04 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:04 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:09 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/auth/me", parameters={}
2025-06-22 19:02:09 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.AuthController#getCurrentUser()
2025-06-22 19:02:09 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:09 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{error=Không có phiên đăng nhập}]
2025-06-22 19:02:09 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 401 UNAUTHORIZED
2025-06-22 19:02:09 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:02:09 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:02:09 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:02:09 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:02:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:02:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:02:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:02:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:02:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:02:09 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:09 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:02:09 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:09 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:09 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@11017c61, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:02:09 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@301a8d34, com.example.demo.dto.CommentDTO@6273cb6d]]
2025-06-22 19:02:10 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@4bb05914, com.example.demo.dto.CommentDTO@5856f9e4]]
2025-06-22 19:02:10 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:13 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/auth/login", parameters={}
2025-06-22 19:02:13 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.AuthController#login(AuthRequest)
2025-06-22 19:02:13 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [com.example.demo.dto.AuthRequest@bb0ba3c]
2025-06-22 19:02:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:02:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:02:13 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:02:13 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:13 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{message=Login success, user={role=ADMIN, fullName=Lương Quang Dũng, id=13, avatar=L, email=quangdun (truncated)...]
2025-06-22 19:02:13 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:15 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:02:15 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:02:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:15 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:15 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:15 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@3852770e, com.example.demo.entity.Cartoon@40e34106, com.example.dem (truncated)...]
2025-06-22 19:02:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:15 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications", parameters={}
2025-06-22 19:02:15 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/user-achievements/username/QuangDung1204/check-achievements", parameters={}
2025-06-22 19:02:15 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getNotifications()
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#checkAchievementsByUsername(String)
2025-06-22 19:02:15 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications/unread-count", parameters={}
2025-06-22 19:02:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:02:15 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getUnreadCount()
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.user_id 
    from
        notifications n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(n) 
    FROM
        Notification n 
    WHERE
        n.user = :user 
        AND n.isRead = false */ select
            count(n1_0.id) 
        from
            notifications n1_0 
        where
            n1_0.user_id=? 
            and n1_0.is_read=0
2025-06-22 19:02:15 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:02:15 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[]]
2025-06-22 19:02:15 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:15 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [0]
2025-06-22 19:02:15 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:15 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{userId=13, message=Achievements checked and updated, success=true}]
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:02:15 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:02:16 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:17 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:02:17 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:02:17 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:17 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:17 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:17 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:17 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@6573a454, com.example.demo.entity.Cartoon@47c6ca37, com.example.dem (truncated)...]
2025-06-22 19:02:17 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:17 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:17 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:17 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications/unread-count", parameters={}
2025-06-22 19:02:17 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications", parameters={}
2025-06-22 19:02:17 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getNotifications()
2025-06-22 19:02:17 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getUnreadCount()
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/user-achievements/username/QuangDung1204/check-achievements", parameters={}
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#checkAchievementsByUsername(String)
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:02:17 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:17 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:17 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(n) 
    FROM
        Notification n 
    WHERE
        n.user = :user 
        AND n.isRead = false */ select
            count(n1_0.id) 
        from
            notifications n1_0 
        where
            n1_0.user_id=? 
            and n1_0.is_read=0
2025-06-22 19:02:17 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.user_id 
    from
        notifications n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:17 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [0]
2025-06-22 19:02:17 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:02:17 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[]]
2025-06-22 19:02:17 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:17 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{userId=13, message=Achievements checked and updated, success=true}]
2025-06-22 19:02:17 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:02:17 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:02:18 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/4/episodes", parameters={}
2025-06-22 19:02:20 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/4", parameters={}
2025-06-22 19:02:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:02:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:02:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:02:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:02:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:02:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:02:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:02:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be/03 (truncated)...]
2025-06-22 19:02:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@b35ade0, isDisliked=false, dislikeCount=0, isLiked=false, l (truncated)...]
2025-06-22 19:02:20 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:20 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/4/comments", parameters={}
2025-06-22 19:02:20 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:02:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:02:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:02:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:02:20 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:20 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@450abd4c]]
2025-06-22 19:02:20 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:20 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/4/comments", parameters={}
2025-06-22 19:02:20 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:02:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:02:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:02:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:02:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:02:20 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:20 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@50bba0d7]]
2025-06-22 19:02:20 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:02:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:02:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:23 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/4/comments", parameters={}
2025-06-22 19:02:23 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#createComment(Long, Map)
2025-06-22 19:02:23 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{content=1, rating=5}]
2025-06-22 19:02:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:02:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:02:23 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.demo.entity.Comment */insert 
    into
        comments (cartoon_id, content, created_at, parent_id, rating, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-22 19:02:23 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:02:23 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{createdAt=2025-06-22T19:02:23.319631100, rating=5, id=12, content=1, username=QuangDung1204}]
2025-06-22 19:02:23 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 201 CREATED
2025-06-22 19:03:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:23 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/4/comments", parameters={}
2025-06-22 19:03:23 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#createComment(Long, Map)
2025-06-22 19:03:23 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{content=1, rating=5}]
2025-06-22 19:03:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:03:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.demo.entity.Comment */insert 
    into
        comments (cartoon_id, content, created_at, parent_id, rating, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-22 19:03:23 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:03:23 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{createdAt=2025-06-22T19:03:23.939544900, rating=5, id=13, content=1, username=QuangDung1204}]
2025-06-22 19:03:23 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 201 CREATED
2025-06-22 19:03:36 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:03:36 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:03:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:36 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:36 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:36 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:36 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@1d8a7344, com.example.demo.entity.Cartoon@1b5183f2, com.example.dem (truncated)...]
2025-06-22 19:03:36 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications/unread-count", parameters={}
2025-06-22 19:03:36 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications", parameters={}
2025-06-22 19:03:36 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:03:36 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getNotifications()
2025-06-22 19:03:36 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getUnreadCount()
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/user-achievements/username/QuangDung1204/check-achievements", parameters={}
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#checkAchievementsByUsername(String)
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:36 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:36 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(n) 
    FROM
        Notification n 
    WHERE
        n.user = :user 
        AND n.isRead = false */ select
            count(n1_0.id) 
        from
            notifications n1_0 
        where
            n1_0.user_id=? 
            and n1_0.is_read=0
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.user_id 
    from
        notifications n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc
2025-06-22 19:03:36 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:03:36 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [0]
2025-06-22 19:03:36 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:03:36 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[]]
2025-06-22 19:03:36 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:03:36 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{userId=13, message=Achievements checked and updated, success=true}]
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:03:36 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:03:38 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:03:38 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:03:38 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:03:38 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:03:38 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:03:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:03:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:03:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:03:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:03:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:03:38 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:03:38 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@2b17a938, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:03:38 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:03:38 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:03:38 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:03:38 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@7e99aeed, com.example.demo.dto.CommentDTO@1a6830ff]]
2025-06-22 19:03:39 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@85c1fb0, com.example.demo.dto.CommentDTO@3aa3b457]]
2025-06-22 19:03:39 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:03:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:03:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:42 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/2/comments", parameters={}
2025-06-22 19:03:42 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#createComment(Long, Map)
2025-06-22 19:03:42 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{content=1, rating=5}]
2025-06-22 19:03:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:03:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:03:42 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.demo.entity.Comment */insert 
    into
        comments (cartoon_id, content, created_at, parent_id, rating, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-22 19:03:42 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:03:42 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{createdAt=2025-06-22T19:03:42.094584500, rating=5, id=14, content=1, username=QuangDung1204}]
2025-06-22 19:03:42 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 201 CREATED
2025-06-22 19:04:49 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:04:49 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:04:49 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:04:49 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:04:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:04:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:04:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:04:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:04:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:04:49 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:04:49 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:04:49 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:04:49 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:04:49 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@5986fda0, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:04:49 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@57ff39b, com.example.demo.dto.CommentDTO@502b36d9, com.example.demo (truncated)...]
2025-06-22 19:04:50 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@6530d023, com.example.demo.dto.CommentDTO@187d21da, com.example.dem (truncated)...]
2025-06-22 19:04:50 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:05:19 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:05:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:05:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:05:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:05:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:05:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:05:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:05:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@2a8ff518, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:05:19 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@66ee2166, com.example.demo.dto.CommentDTO@449fcefd, com.example.dem (truncated)...]
2025-06-22 19:05:20 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@cf073bc, com.example.demo.dto.CommentDTO@49e3131a, com.example.demo (truncated)...]
2025-06-22 19:05:20 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:39 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:05:39 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:05:39 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:05:39 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:05:39 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:05:39 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:05:39 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:05:39 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:39 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:05:39 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:39 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:39 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@57f0e4e9, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:05:39 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@54171510, com.example.demo.dto.CommentDTO@5ff86ff1, com.example.dem (truncated)...]
2025-06-22 19:05:40 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@7e7d530, com.example.demo.dto.CommentDTO@5264eb1d, com.example.demo (truncated)...]
2025-06-22 19:05:40 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:50 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:05:50 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:05:50 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:05:50 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:05:50 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:50 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:05:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:05:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:05:50 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:50 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:05:50 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:50 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@3acd078b, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:05:50 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:50 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@2126e5d8, com.example.demo.dto.CommentDTO@2b2de209, com.example.dem (truncated)...]
2025-06-22 19:05:52 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@44dfca85, com.example.demo.dto.CommentDTO@1748ea22, com.example.dem (truncated)...]
2025-06-22 19:05:52 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:52 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:05:52 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:05:52 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:05:52 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:05:52 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:52 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:05:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:05:52 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:05:52 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:52 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:05:52 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:52 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:52 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@28ff861c, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:05:52 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:53 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:05:53 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:05:53 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:05:53 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:05:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:05:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:05:53 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:05:53 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:05:53 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:53 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:53 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@38e5eaec, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:05:53 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@f43ae94, com.example.demo.dto.CommentDTO@18e62228, com.example.demo (truncated)...]
2025-06-22 19:05:53 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@31f7fb77, com.example.demo.dto.CommentDTO@2acca9cc, com.example.dem (truncated)...]
2025-06-22 19:05:53 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:05:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:05:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:05:56 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/2/comments", parameters={}
2025-06-22 19:05:56 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#createComment(Long, Map)
2025-06-22 19:05:56 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{content=1, rating=5}]
2025-06-22 19:05:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:05:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:05:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.demo.entity.Comment */insert 
    into
        comments (cartoon_id, content, created_at, parent_id, rating, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-22 19:05:56 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:05:56 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{createdAt=2025-06-22T19:05:56.185910900, rating=5, id=15, content=1, username=QuangDung1204}]
2025-06-22 19:05:56 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 201 CREATED
2025-06-22 19:06:07 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:06:07 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:06:07 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:06:07 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:06:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:06:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:06:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:06:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:06:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:06:07 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:06:07 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:06:07 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:06:07 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:06:07 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@57553dfe, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:06:07 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@65eecf14, com.example.demo.dto.CommentDTO@15ba10ea, com.example.dem (truncated)...]
2025-06-22 19:06:09 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@40854700, com.example.demo.dto.CommentDTO@4f8fb1dc, com.example.dem (truncated)...]
2025-06-22 19:06:09 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/comments/14/like", parameters={}
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#likeComment(Long, Map)
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{isLiked=true}]
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.cartoon_id,
        c2_0.id,
        c2_0.actors,
        c2_0.created_at,
        c2_0.description,
        c2_0.director,
        c2_0.duration,
        c2_0.genre,
        c2_0.image_url,
        c2_0.release_year,
        c2_0.status,
        c2_0.title,
        c2_0.total_episodes,
        c2_0.trailer_url,
        c2_0.video_url,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        c3_0.id,
        c3_0.actors,
        c3_0.created_at,
        c3_0.description,
        c3_0.director,
        c3_0.duration,
        c3_0.genre,
        c3_0.image_url,
        c3_0.release_year,
        c3_0.status,
        c3_0.title,
        c3_0.total_episodes,
        c3_0.trailer_url,
        c3_0.video_url,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    join
        cartoonn c2_0 
            on c2_0.id=c1_0.cartoon_id 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        cartoonn c3_0 
            on c3_0.id=pc1_0.cartoon_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.id=?
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.comment_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.user_id 
    from
        comment_likes cl1_0 
    where
        cl1_0.comment_id=? 
        and cl1_0.user_id=?
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.demo.entity.CommentLike */insert 
    into
        comment_likes (comment_id, created_at, is_liked, user_id) 
    values
        (?, ?, ?, ?)
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.comment_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.user_id 
    from
        comment_likes cl1_0 
    where
        cl1_0.comment_id=? 
        and cl1_0.user_id=?
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{isDisliked=false, dislikeCount=0, isLiked=true, likeCount=1}]
2025-06-22 19:06:50 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@372a882a, com.example.demo.dto.CommentDTO@3052dd94, com.example.dem (truncated)...]
2025-06-22 19:06:50 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/comments/15/like", parameters={}
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#likeComment(Long, Map)
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{isLiked=true}]
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.cartoon_id,
        c2_0.id,
        c2_0.actors,
        c2_0.created_at,
        c2_0.description,
        c2_0.director,
        c2_0.duration,
        c2_0.genre,
        c2_0.image_url,
        c2_0.release_year,
        c2_0.status,
        c2_0.title,
        c2_0.total_episodes,
        c2_0.trailer_url,
        c2_0.video_url,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        c3_0.id,
        c3_0.actors,
        c3_0.created_at,
        c3_0.description,
        c3_0.director,
        c3_0.duration,
        c3_0.genre,
        c3_0.image_url,
        c3_0.release_year,
        c3_0.status,
        c3_0.title,
        c3_0.total_episodes,
        c3_0.trailer_url,
        c3_0.video_url,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    join
        cartoonn c2_0 
            on c2_0.id=c1_0.cartoon_id 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        cartoonn c3_0 
            on c3_0.id=pc1_0.cartoon_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.id=?
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.comment_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.user_id 
    from
        comment_likes cl1_0 
    where
        cl1_0.comment_id=? 
        and cl1_0.user_id=?
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.demo.entity.CommentLike */insert 
    into
        comment_likes (comment_id, created_at, is_liked, user_id) 
    values
        (?, ?, ?, ?)
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.comment_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.user_id 
    from
        comment_likes cl1_0 
    where
        cl1_0.comment_id=? 
        and cl1_0.user_id=?
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{isDisliked=false, dislikeCount=0, isLiked=true, likeCount=1}]
2025-06-22 19:06:51 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@574a4f4f, com.example.demo.dto.CommentDTO@d5ea919, com.example.demo (truncated)...]
2025-06-22 19:06:51 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/2/like", parameters={}
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#likeCartoon(Long, Map)
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{isLiked=true}]
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.cartoon_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.updated_at,
        cl1_0.user_id 
    from
        cartoon_likes cl1_0 
    where
        cl1_0.cartoon_id=? 
        and cl1_0.user_id=?
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* delete for com.example.demo.entity.CartoonLike */delete 
    from
        cartoon_likes 
    where
        id=?
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        cl.isLiked 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.user = :user */ select
            cl1_0.is_liked 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.user_id=?
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{isDisliked=false, dislikeCount=0, isLiked=false, likeCount=0}]
2025-06-22 19:06:53 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/2/like", parameters={}
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#likeCartoon(Long, Map)
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{isLiked=true}]
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.cartoon_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.updated_at,
        cl1_0.user_id 
    from
        cartoon_likes cl1_0 
    where
        cl1_0.cartoon_id=? 
        and cl1_0.user_id=?
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.demo.entity.CartoonLike */insert 
    into
        cartoon_likes (cartoon_id, created_at, is_liked, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        cl.isLiked 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.user = :user */ select
            cl1_0.is_liked 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.user_id=?
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{isDisliked=false, dislikeCount=0, isLiked=true, likeCount=1}]
2025-06-22 19:06:55 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/2/like", parameters={}
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#likeCartoon(Long, Map)
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{isLiked=false}]
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.cartoon_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.updated_at,
        cl1_0.user_id 
    from
        cartoon_likes cl1_0 
    where
        cl1_0.cartoon_id=? 
        and cl1_0.user_id=?
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.demo.entity.CartoonLike */update cartoon_likes 
    set
        cartoon_id=?,
        created_at=?,
        is_liked=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        cl.isLiked 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.user = :user */ select
            cl1_0.is_liked 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.user_id=?
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{isDisliked=true, dislikeCount=1, isLiked=false, likeCount=0}]
2025-06-22 19:06:56 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/2/like", parameters={}
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#likeCartoon(Long, Map)
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{isLiked=true}]
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.cartoon_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.updated_at,
        cl1_0.user_id 
    from
        cartoon_likes cl1_0 
    where
        cl1_0.cartoon_id=? 
        and cl1_0.user_id=?
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* update
        for com.example.demo.entity.CartoonLike */update cartoon_likes 
    set
        cartoon_id=?,
        created_at=?,
        is_liked=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        cl.isLiked 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.user = :user */ select
            cl1_0.is_liked 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.user_id=?
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{isDisliked=false, dislikeCount=0, isLiked=true, likeCount=1}]
2025-06-22 19:06:57 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:07:19 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:07:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:07:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:07:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:07:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:07:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:07:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:07:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:07:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:07:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:07:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:07:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:07:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:07:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@5aa1850c, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:07:19 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@447a342a, com.example.demo.dto.CommentDTO@5e2a3ab3, com.example.dem (truncated)...]
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@6407cd38, com.example.demo.dto.CommentDTO@7976b38, com.example.demo (truncated)...]
2025-06-22 19:07:20 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:07:20 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:08:14 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:08:14 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:08:14 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:08:14 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:08:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:08:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:08:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:08:14 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:08:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:08:14 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:08:14 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:08:14 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:08:14 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:08:14 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@2ad73d54, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:08:14 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@3da008a1, com.example.demo.dto.CommentDTO@c0dba3, com.example.demo. (truncated)...]
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@65d9d1f2, com.example.demo.dto.CommentDTO@22cb212b, com.example.dem (truncated)...]
2025-06-22 19:08:15 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:08:15 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:08:18 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:08:18 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:08:18 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:08:18 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:08:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:08:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:08:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:08:18 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:08:18 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:08:18 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:08:18 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:08:18 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:08:18 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:08:18 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@386e521, isDisliked=false, dislikeCount=0, isLiked=false, l (truncated)...]
2025-06-22 19:08:18 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@415a0626, com.example.demo.dto.CommentDTO@18cb0387, com.example.dem (truncated)...]
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@ff4d6ab, com.example.demo.dto.CommentDTO@491b6ca6, com.example.demo (truncated)...]
2025-06-22 19:08:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:08:20 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:09:18 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:09:18 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:09:18 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:09:18 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:09:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:09:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:09:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:09:18 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:09:18 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:18 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:09:18 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:09:18 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:09:18 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:09:18 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:09:18 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@5ac4312c, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:09:18 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:09:18 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:09:18 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:09:18 [http-nio-8080-exec-4] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:09:18 [http-nio-8080-exec-4] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:09:18 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:09:18 [http-nio-8080-exec-4] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:09:18 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:09:18.607127300, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:09:18 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:09:18.607127300, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:09:18 [http-nio-8080-exec-4] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:09:18 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@16b78ae4, com.example.demo.dto.CommentDTO@2035763c, com.example.dem (truncated)...]
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@46c7650c, com.example.demo.dto.CommentDTO@db2f465, com.example.demo (truncated)...]
2025-06-22 19:09:19 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:09:19 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:09:19 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:09:19 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:09:19 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:09:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:09:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:09:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:09:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:09:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:09:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:09:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:09:19 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:09:19 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:09:19 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:09:19 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@535e0af1, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:09:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:09:19 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:09:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:09:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:09:19 [http-nio-8080-exec-5] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:09:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:09:19.540803800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:09:19 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:09:19.540803800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:09:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:09:19 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@2ea89b90, com.example.demo.dto.CommentDTO@26ff2007, com.example.dem (truncated)...]
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@7d3819e3, com.example.demo.dto.CommentDTO@6a09ff95, com.example.dem (truncated)...]
2025-06-22 19:09:20 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:09:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:10:34 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:10:34 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:10:34 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:10:34 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:10:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:10:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:10:34 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:10:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:10:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:10:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:10:34 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:10:34 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:10:34 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:10:34 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:10:34 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@14a2c3b8, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:10:34 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:10:34 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:10:34 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:10:34 [http-nio-8080-exec-10] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:10:34 [http-nio-8080-exec-10] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:10:34 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:10:34 [http-nio-8080-exec-10] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:10:34 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:10:34.047717300, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:10:34 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:10:34.047717300, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:10:34 [http-nio-8080-exec-10] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:10:34 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5568a4cf, com.example.demo.dto.CommentDTO@171fb45a, com.example.dem (truncated)...]
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@31b33cba, com.example.demo.dto.CommentDTO@4bc092c, com.example.demo (truncated)...]
2025-06-22 19:10:35 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:10:35 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:11:19 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:11:19 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:11:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:11:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:11:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:11:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:11:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:11:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:11:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:11:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:11:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:11:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:11:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:11:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:11:19 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:11:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:11:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@2df19a85, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:11:19 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:11:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:11:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:11:19 [http-nio-8080-exec-4] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:11:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:11:19.582007800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:11:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:11:19.582007800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:11:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:11:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@7e3d0e49, com.example.demo.dto.CommentDTO@6629274f, com.example.dem (truncated)...]
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@6fd1122d, com.example.demo.dto.CommentDTO@6d92320f, com.example.dem (truncated)...]
2025-06-22 19:11:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:11:20 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:11:47 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:11:47 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:11:47 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:11:47 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:11:47 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:11:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:11:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:47 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:11:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:11:47 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:11:47 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:11:47 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:11:47 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:11:47 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:11:47 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@1ee63d66, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:11:47 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:11:47 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:11:47 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:11:47 [http-nio-8080-exec-6] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:11:47 [http-nio-8080-exec-6] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:11:47 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:11:47 [http-nio-8080-exec-6] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:11:47 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:11:47.128429800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:11:47 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:11:47.128429800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:11:47 [http-nio-8080-exec-6] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:11:47 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@6e0714a3, com.example.demo.dto.CommentDTO@437b20a3, com.example.dem (truncated)...]
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@11289208, com.example.demo.dto.CommentDTO@b6893f8, com.example.demo (truncated)...]
2025-06-22 19:11:48 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:11:48 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:12:00 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:12:00 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:12:00 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:12:00 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:12:00 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:12:00 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:12:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:12:00 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:12:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:12:00 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:12:00 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@3dae2c9f, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:12:00 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:12:00 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:12:00 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:12:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:12:00 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:12:00 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:12:00 [http-nio-8080-exec-7] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:12:00 [http-nio-8080-exec-7] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:12:00 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:12:00 [http-nio-8080-exec-7] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:12:00 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:12:00.941453100, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:12:00 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:12:00.941453100, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:12:00 [http-nio-8080-exec-7] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:12:00 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@48e75416, com.example.demo.dto.CommentDTO@6e205ca5, com.example.dem (truncated)...]
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5662be1a, com.example.demo.dto.CommentDTO@5f029c14, com.example.dem (truncated)...]
2025-06-22 19:12:02 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:12:02 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:12:32 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:12:32 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:12:32 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:12:32 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:12:32 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:12:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:12:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:32 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:12:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:12:32 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:12:32 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:12:32 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:12:32 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:12:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:12:32 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:12:32 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@50da4790, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:12:32 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:12:32 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:12:32 [http-nio-8080-exec-9] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:12:32 [http-nio-8080-exec-9] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:12:32 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:12:32 [http-nio-8080-exec-9] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:12:32 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:12:32.690158500, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:12:32 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:12:32.690158500, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:12:32 [http-nio-8080-exec-9] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:12:32 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@9d1b30, com.example.demo.dto.CommentDTO@21121a77, com.example.demo. (truncated)...]
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@31ef29a1, com.example.demo.dto.CommentDTO@1c83e863, com.example.dem (truncated)...]
2025-06-22 19:12:33 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:12:33 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:15 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:13:15 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:13:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:13:15 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:13:15 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:13:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:13:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:13:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:13:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:13:15 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:13:15 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@39a09e40, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:13:15 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:15 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:13:15 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:13:15 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:15 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:13:15 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:13:15 [http-nio-8080-exec-5] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:13:15 [http-nio-8080-exec-5] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:13:15 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:13:15 [http-nio-8080-exec-5] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:13:15 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:13:15.601030, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:13:15 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:13:15.601030, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:13:15 [http-nio-8080-exec-5] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:13:15 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@23abcbd8, com.example.demo.dto.CommentDTO@61fd71a, com.example.demo (truncated)...]
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@3a02afdf, com.example.demo.dto.CommentDTO@3ede4122, com.example.dem (truncated)...]
2025-06-22 19:13:16 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:16 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:19 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:13:19 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:13:19 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:13:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:13:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:13:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:13:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:13:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:13:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:13:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:13:19 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:13:19 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@38105bac, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:13:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:13:19 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:19 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:13:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:13:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:13:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:13:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:13:19 [http-nio-8080-exec-4] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:13:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:13:19.568893400, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:13:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:13:19.568893400, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:13:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:13:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@15823598, com.example.demo.dto.CommentDTO@59f62fbb, com.example.dem (truncated)...]
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5d7085fc, com.example.demo.dto.CommentDTO@b19be25, com.example.demo (truncated)...]
2025-06-22 19:13:20 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:49 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:13:49 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:13:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:13:49 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:13:49 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:13:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:13:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:13:49 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:13:49 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:13:49 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:13:49 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:13:49 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@3e7bab67, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:13:49 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:13:49 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:13:49 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:49 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:49 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:13:49 [http-nio-8080-exec-8] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:13:49 [http-nio-8080-exec-8] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:13:49 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:13:49 [http-nio-8080-exec-8] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:13:49 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:13:49.330584300, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:13:49 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:13:49.330584300, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:13:49 [http-nio-8080-exec-8] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:13:49 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5111a9c1, com.example.demo.dto.CommentDTO@6b4aa6e0, com.example.dem (truncated)...]
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@7054e189, com.example.demo.dto.CommentDTO@19f2db42, com.example.dem (truncated)...]
2025-06-22 19:13:50 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:13:50 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:14:41 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:14:41 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:14:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:14:41 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:14:41 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:14:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:14:41 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:14:41 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:14:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:14:41 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:14:41 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:14:41 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@2ee75265, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:14:41 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:14:41 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:14:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:14:41 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:14:41 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:14:41 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:14:41 [http-nio-8080-exec-1] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:14:41 [http-nio-8080-exec-1] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:14:41 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:14:41 [http-nio-8080-exec-1] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:14:41 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:14:41.717068500, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:14:41 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:14:41.717068500, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:14:41 [http-nio-8080-exec-1] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:14:41 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@19e1f59a, com.example.demo.dto.CommentDTO@24b8eaee, com.example.dem (truncated)...]
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@44ed4195, com.example.demo.dto.CommentDTO@197e945e, com.example.dem (truncated)...]
2025-06-22 19:14:42 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:14:42 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:15:19 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:15:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:15:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:15:19 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/episodes", parameters={}
2025-06-22 19:15:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonEpisodes(Long)
2025-06-22 19:15:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:15:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:15:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:15:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        e 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            e1_0.id,
            e1_0.cartoonn_id,
            e1_0.created_at,
            e1_0.description,
            e1_0.duration,
            e1_0.episode_num,
            e1_0.season_num,
            e1_0.thumbnail_url,
            e1_0.title,
            e1_0.video_url,
            e1_0.views 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:15:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:15:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@36895c42, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:15:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:15:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[{duration=1123, episode_number=1, video_url=https://youtu.be/032ctWjilU0, videoUrl=https://youtu.be (truncated)...]
2025-06-22 19:15:19 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:15:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:15:19 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:15:19 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:15:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:15:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:15:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:15:19 [http-nio-8080-exec-10] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:15:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:15:19.586606100, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:15:19 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:15:19.586606100, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:15:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:15:19 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@7717a228, com.example.demo.dto.CommentDTO@7a8be7e0, com.example.dem (truncated)...]
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1e48845c, com.example.demo.dto.CommentDTO@6675e519, com.example.dem (truncated)...]
2025-06-22 19:15:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:15:20 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:15:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:15:35 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:15:35 [http-nio-8080-exec-4] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:15:35 [http-nio-8080-exec-4] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:15:35 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:15:35 [http-nio-8080-exec-4] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:15:35 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:15:35.021697200, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:15:35 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:15:35.021697200, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:15:35 [http-nio-8080-exec-4] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:15:35 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@49969b0a, com.example.demo.dto.CommentDTO@7953036f, com.example.dem (truncated)...]
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@4efc550, com.example.demo.dto.CommentDTO@43607ede, com.example.demo (truncated)...]
2025-06-22 19:15:36 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:15:36 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:16:26 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:26 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:16:26 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:16:26 [http-nio-8080-exec-5] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:16:26 [http-nio-8080-exec-5] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:16:26 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:16:26 [http-nio-8080-exec-5] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:16:26 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:16:26.829412700, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:16:26 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:16:26.829412700, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:16:26 [http-nio-8080-exec-5] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:16:26 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@cf7e280, com.example.demo.dto.CommentDTO@1184a9bd, com.example.demo (truncated)...]
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@b12962a, com.example.demo.dto.CommentDTO@2cc7870b, com.example.demo (truncated)...]
2025-06-22 19:16:28 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:16:28 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:16:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:46 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:16:46 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:16:46 [http-nio-8080-exec-6] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:16:46 [http-nio-8080-exec-6] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:16:46 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:16:46 [http-nio-8080-exec-6] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:16:46 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:16:46.117123400, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:16:46 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:16:46.117123400, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:16:46 [http-nio-8080-exec-6] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:16:46 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@3d4410fb, com.example.demo.dto.CommentDTO@b4fb6df, com.example.demo (truncated)...]
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@8809dcb, com.example.demo.dto.CommentDTO@4c30c2, com.example.demo.d (truncated)...]
2025-06-22 19:16:47 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:16:47 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:17:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:17:19 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:17:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:17:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:17:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:17:19 [http-nio-8080-exec-9] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:17:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:17:19.555587, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:17:19 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:17:19.555587, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:17:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:17:19 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@85a4c1a, com.example.demo.dto.CommentDTO@46432e4c, com.example.demo (truncated)...]
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@d27081b, com.example.demo.dto.CommentDTO@145c8616, com.example.demo (truncated)...]
2025-06-22 19:17:20 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:17:20 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:17:55 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:55 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:17:55 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:17:55 [http-nio-8080-exec-8] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:17:55 [http-nio-8080-exec-8] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:17:55 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:17:55 [http-nio-8080-exec-8] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:17:55 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:17:55.056133900, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:17:55 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:17:55.056133900, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:17:55 [http-nio-8080-exec-8] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:17:55 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:17:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:17:56 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:17:56 [http-nio-8080-exec-4] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:17:56 [http-nio-8080-exec-4] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:17:56 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:17:56 [http-nio-8080-exec-4] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:17:56 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:17:56.151893700, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:17:56 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:17:56.151893700, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:17:56 [http-nio-8080-exec-4] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:17:56 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@6482037, com.example.demo.dto.CommentDTO@1245bb3e, com.example.demo (truncated)...]
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1fc11f0b, com.example.demo.dto.CommentDTO@7630e279, com.example.dem (truncated)...]
2025-06-22 19:17:57 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:17:57 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:17:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:17:58 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:17:58 [http-nio-8080-exec-6] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:17:58 [http-nio-8080-exec-6] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:17:58 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:17:58 [http-nio-8080-exec-6] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:17:58 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:17:58.519194200, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:17:58 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:17:58.519194200, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:17:58 [http-nio-8080-exec-6] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:17:58 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@46628c48, com.example.demo.dto.CommentDTO@60580c4d, com.example.dem (truncated)...]
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5b94eb32, com.example.demo.dto.CommentDTO@693c68fd, com.example.dem (truncated)...]
2025-06-22 19:17:59 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:17:59 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:07 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:18:07 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:18:07 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:07 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:07 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:07 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@18af80bf, com.example.demo.entity.Cartoon@58df18e8, com.example.dem (truncated)...]
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:07 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:07 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications", parameters={}
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:07 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getNotifications()
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:18:07 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications/unread-count", parameters={}
2025-06-22 19:18:07 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:07 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getUnreadCount()
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/user-achievements/username/QuangDung1204/check-achievements", parameters={}
2025-06-22 19:18:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#checkAchievementsByUsername(String)
2025-06-22 19:18:07 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.user_id 
    from
        notifications n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(n) 
    FROM
        Notification n 
    WHERE
        n.user = :user 
        AND n.isRead = false */ select
            count(n1_0.id) 
        from
            notifications n1_0 
        where
            n1_0.user_id=? 
            and n1_0.is_read=0
2025-06-22 19:18:07 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:07 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[]]
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:07 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:07 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [0]
2025-06-22 19:18:07 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{userId=13, message=Achievements checked and updated, success=true}]
2025-06-22 19:18:07 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:18:07 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:18:09 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:14 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-22 19:18:14 [tomcat-shutdown] INFO  o.s.b.w.e.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-22 19:18:14 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-06-22 19:18:14 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-22 19:18:14 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-22 19:18:20 [main] INFO  com.example.demo.DemoApplication - Starting DemoApplication using Java 21.0.7 with PID 9496 (C:\Users\Admin\Desktop\Cartoon-movie\BackEnd\demo\target\classes started by Admin in C:\Users\Admin\Desktop\Cartoon-movie\BackEnd\demo)
2025-06-22 19:18:20 [main] DEBUG com.example.demo.DemoApplication - Running with Spring Boot v3.4.6, Spring v6.2.7
2025-06-22 19:18:20 [main] INFO  com.example.demo.DemoApplication - The following 1 profile is active: "dev"
2025-06-22 19:18:21 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-06-22 19:18:21 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 45 ms. Found 11 JPA repository interfaces.
2025-06-22 19:18:21 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-22 19:18:21 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-06-22 19:18:21 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-22 19:18:21 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-22 19:18:21 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 778 ms
2025-06-22 19:18:21 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-22 19:18:21 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1883871b
2025-06-22 19:18:21 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-22 19:18:21 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-06-22 19:18:21 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.15.Final
2025-06-22 19:18:21 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-06-22 19:18:22 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-06-22 19:18:22 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-06-22 19:18:22 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-06-22 19:18:22 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-06-22 19:18:22 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-06-22 19:18:22 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-06-22 19:18:22 [main] DEBUG o.s.w.f.ServerHttpObservationFilter - Filter 'webMvcObservationFilter' configured for use
2025-06-22 19:18:22 [main] DEBUG c.e.d.c.CustomTokenAuthenticationFilter - Filter 'customTokenAuthenticationFilter' configured for use
2025-06-22 19:18:22 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-06-22 19:18:23 [main] INFO  o.s.s.c.a.a.c.InitializeAuthenticationProviderBeanManagerConfigurer$InitializeAuthenticationProviderManagerConfigurer - Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-06-22 19:18:23 [main] WARN  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-06-22 19:18:23 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-06-22 19:18:23 [main] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - 92 mappings in 'requestMappingHandlerMapping'
2025-06-22 19:18:23 [main] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Patterns [/webjars/**, /**] in 'resourceHandlerMapping'
2025-06-22 19:18:23 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2025-06-22 19:18:23 [main] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerAdapter - ControllerAdvice beans: 0 @ModelAttribute, 0 @InitBinder, 1 RequestBodyAdvice, 1 ResponseBodyAdvice
2025-06-22 19:18:23 [main] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - ControllerAdvice beans: 1 @ExceptionHandler, 1 ResponseBodyAdvice
2025-06-22 19:18:23 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-22 19:18:23 [main] INFO  com.example.demo.DemoApplication - Started DemoApplication in 3.279 seconds (process running for 3.446)
2025-06-22 19:18:24 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-22 19:18:24 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-22 19:18:24 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Detected StandardServletMultipartResolver
2025-06-22 19:18:24 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Detected AcceptHeaderLocaleResolver
2025-06-22 19:18:24 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Detected FixedThemeResolver
2025-06-22 19:18:24 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@3f5298a5
2025-06-22 19:18:24 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Detected org.springframework.web.servlet.support.SessionFlashMapManager@fe32f34
2025-06-22 19:18:24 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - enableLoggingRequestDetails='false': request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
2025-06-22 19:18:24 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/user-achievements/username/QuangDung1204/check-achievements", parameters={}
2025-06-22 19:18:24 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications/unread-count", parameters={}
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#checkAchievementsByUsername(String)
2025-06-22 19:18:24 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getUnreadCount()
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:18:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(n) 
    FROM
        Notification n 
    WHERE
        n.user = :user 
        AND n.isRead = false */ select
            count(n1_0.id) 
        from
            notifications n1_0 
        where
            n1_0.user_id=? 
            and n1_0.is_read=0
2025-06-22 19:18:24 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:24 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [0]
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:24 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{message=Achievements checked and updated, userId=13, success=true}]
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:24 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:18:24 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:18:25 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:28 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/login", parameters={}
2025-06-22 19:18:28 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.LoginController#login()
2025-06-22 19:18:28 [http-nio-8080-exec-9] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-06-22 19:18:28 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:29 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/admin", parameters={}
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.admin.AdminDashboardController#dashboard(Model)
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.cartoon_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.parent_id,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id 
    from
        comments c1_0
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        e1_0.id,
        e1_0.cartoonn_id,
        e1_0.created_at,
        e1_0.description,
        e1_0.duration,
        e1_0.episode_num,
        e1_0.season_num,
        e1_0.thumbnail_url,
        e1_0.title,
        e1_0.video_url,
        e1_0.views 
    from
        episodes e1_0
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.cartoon_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.parent_id,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id 
    from
        comments c1_0
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.cartoon_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.parent_id,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id 
    from
        comments c1_0
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.cartoon_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.parent_id,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id 
    from
        comments c1_0
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    order by
        u1_0.id desc 
    limit
        ?
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-06-22 19:18:29 [http-nio-8080-exec-1] WARN  o.t.s.p.AbstractStandardFragmentInsertionTagProcessor - [THYMELEAF][http-nio-8080-exec-1][admin] Deprecated unwrapped fragment expression "fragments/sidebar :: sidebar" found in template admin, line 18, col 10. Please use the complete syntax of fragment expressions instead ("~{fragments/sidebar :: sidebar}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-06-22 19:18:29 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/admin/movies", parameters={}
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.admin.AdminMovieController#listMovies(String, String, String, String, Model)
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(e) 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            count(e1_0.id) 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(e) 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            count(e1_0.id) 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(e) 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            count(e1_0.id) 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(e) 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            count(e1_0.id) 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(e) 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            count(e1_0.id) 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(e) 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            count(e1_0.id) 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(e) 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            count(e1_0.id) 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(e) 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            count(e1_0.id) 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(e) 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            count(e1_0.id) 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(e) 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            count(e1_0.id) 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(e) 
    FROM
        Episode e 
    WHERE
        e.cartoon.id = :cartoonId */ select
            count(e1_0.id) 
        from
            episodes e1_0 
        where
            e1_0.cartoonn_id=?
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-06-22 19:18:31 [http-nio-8080-exec-3] WARN  o.t.s.p.AbstractStandardFragmentInsertionTagProcessor - [THYMELEAF][http-nio-8080-exec-3][movies] Deprecated unwrapped fragment expression "fragments/sidebar :: sidebar" found in template movies, line 23, col 10. Please use the complete syntax of fragment expressions instead ("~{fragments/sidebar :: sidebar}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-06-22 19:18:31 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/css/movies.css", parameters={}
2025-06-22 19:18:31 [http-nio-8080-exec-2] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:18:31 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 304 NOT_MODIFIED
2025-06-22 19:18:31 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/admin/comments", parameters={}
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.admin.AdminCommentsController#listComments(int, Integer, Integer, String, String, Model)
2025-06-22 19:18:32 [http-nio-8080-exec-6] INFO  c.e.d.c.a.AdminCommentsController - Loading comments - cartoonId: null, rating: null, sort: null, keyword: null
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:18:32 [http-nio-8080-exec-6] INFO  c.e.d.c.a.AdminCommentsController - Total cartoons in database: 11
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.cartoon_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.parent_id,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id 
    from
        comments c1_0
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:32 [http-nio-8080-exec-6] INFO  c.e.d.c.a.AdminCommentsController - Total comments from database: 15
2025-06-22 19:18:32 [http-nio-8080-exec-6] INFO  c.e.d.c.a.AdminCommentsController - Sample comment - ID: 1, username: quangdung12042004, cartoon: Naruto, rating: 5
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.cartoon_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.parent_id,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id 
    from
        comments c1_0
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-06-22 19:18:32 [http-nio-8080-exec-6] WARN  o.t.s.p.AbstractStandardFragmentInsertionTagProcessor - [THYMELEAF][http-nio-8080-exec-6][comments] Deprecated unwrapped fragment expression "fragments/sidebar :: sidebar" found in template comments, line 24, col 10. Please use the complete syntax of fragment expressions instead ("~{fragments/sidebar :: sidebar}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-06-22 19:18:32 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/css/review.css", parameters={}
2025-06-22 19:18:32 [http-nio-8080-exec-8] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:18:32 [http-nio-8080-exec-8] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:18:32 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.cartoon_id,
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    left join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.cartoon_id=?
2025-06-22 19:18:32 [http-nio-8080-exec-8] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /css/review.css: No static resource css/review.css.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource css/review.css.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:18:32 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource css/review.css.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:18:32.653209100, path=/css/review.css, developerMessage=No static resource css/review.css.}]
2025-06-22 19:18:32 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:18:32.653209100, path=/css/review.css, developerMessage=No static resource css/review.css.}]
2025-06-22 19:18:32 [http-nio-8080-exec-8] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [text/css, */*;q=0.1]
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.cartoon_id,
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    left join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.cartoon_id=?
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.cartoon_id,
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    left join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.cartoon_id=?
2025-06-22 19:18:32 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.cartoon_id,
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    left join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.cartoon_id=?
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.cartoon_id,
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    left join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.cartoon_id=?
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.cartoon_id,
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    left join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.cartoon_id=?
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.cartoon_id,
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    left join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.cartoon_id=?
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.cartoon_id,
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    left join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.cartoon_id=?
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.cartoon_id,
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    left join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.cartoon_id=?
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.cartoon_id,
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    left join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.cartoon_id=?
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.cartoon_id,
        c1_0.id,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    left join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.cartoon_id=?
2025-06-22 19:18:32 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:32 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/css/comments.css", parameters={}
2025-06-22 19:18:32 [http-nio-8080-exec-5] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:18:32 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 304 NOT_MODIFIED
2025-06-22 19:18:33 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/admin/users", parameters={}
2025-06-22 19:18:33 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.admin.AdminUserController#listUsers(Model)
2025-06-22 19:18:33 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0
2025-06-22 19:18:33 [http-nio-8080-exec-7] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected 'text/html' given [text/html, application/xhtml+xml, image/avif, image/webp, image/apng, application/xml;q=0.9, */*;q=0.8, application/signed-exchange;v=b3;q=0.7]
2025-06-22 19:18:33 [http-nio-8080-exec-7] WARN  o.t.s.p.AbstractStandardFragmentInsertionTagProcessor - [THYMELEAF][http-nio-8080-exec-7][users] Deprecated unwrapped fragment expression "fragments/sidebar :: sidebar" found in template users, line 13, col 6. Please use the complete syntax of fragment expressions instead ("~{fragments/sidebar :: sidebar}"). The old, unwrapped syntax for fragment expressions will be removed in future versions of Thymeleaf.
2025-06-22 19:18:33 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.user_id,
        a1_0.id,
        a2_0.id,
        a2_0.description,
        a2_0.name 
    from
        user_achievements a1_0 
    left join
        achievements a2_0 
            on a2_0.id=a1_0.achievement_id 
    where
        a1_0.user_id=?
2025-06-22 19:18:33 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.user_id,
        a1_0.id,
        a2_0.id,
        a2_0.description,
        a2_0.name 
    from
        user_achievements a1_0 
    left join
        achievements a2_0 
            on a2_0.id=a1_0.achievement_id 
    where
        a1_0.user_id=?
2025-06-22 19:18:33 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.user_id,
        a1_0.id,
        a2_0.id,
        a2_0.description,
        a2_0.name 
    from
        user_achievements a1_0 
    left join
        achievements a2_0 
            on a2_0.id=a1_0.achievement_id 
    where
        a1_0.user_id=?
2025-06-22 19:18:33 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.user_id,
        a1_0.id,
        a2_0.id,
        a2_0.description,
        a2_0.name 
    from
        user_achievements a1_0 
    left join
        achievements a2_0 
            on a2_0.id=a1_0.achievement_id 
    where
        a1_0.user_id=?
2025-06-22 19:18:33 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:36 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications/unread-count", parameters={}
2025-06-22 19:18:36 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications", parameters={}
2025-06-22 19:18:36 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getUnreadCount()
2025-06-22 19:18:36 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getNotifications()
2025-06-22 19:18:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:36 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(n) 
    FROM
        Notification n 
    WHERE
        n.user = :user 
        AND n.isRead = false */ select
            count(n1_0.id) 
        from
            notifications n1_0 
        where
            n1_0.user_id=? 
            and n1_0.is_read=0
2025-06-22 19:18:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.user_id 
    from
        notifications n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc
2025-06-22 19:18:36 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:36 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [0]
2025-06-22 19:18:36 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:36 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:36 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[]]
2025-06-22 19:18:36 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:42 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:18:42 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:18:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:18:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:42 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications", parameters={}
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/user-achievements/username/QuangDung1204/check-achievements", parameters={}
2025-06-22 19:18:42 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications/unread-count", parameters={}
2025-06-22 19:18:42 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:42 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getNotifications()
2025-06-22 19:18:42 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@56f0b973, com.example.demo.entity.Cartoon@87c0892, com.example.demo (truncated)...]
2025-06-22 19:18:42 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getUnreadCount()
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#checkAchievementsByUsername(String)
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:18:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:42 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(n) 
    FROM
        Notification n 
    WHERE
        n.user = :user 
        AND n.isRead = false */ select
            count(n1_0.id) 
        from
            notifications n1_0 
        where
            n1_0.user_id=? 
            and n1_0.is_read=0
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.user_id 
    from
        notifications n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc
2025-06-22 19:18:42 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:18:42 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:42 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [0]
2025-06-22 19:18:42 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[]]
2025-06-22 19:18:42 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:42 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{message=Achievements checked and updated, userId=13, success=true}]
2025-06-22 19:18:42 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:18:42 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:18:43 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:48 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:18:48 [http-nio-8080-exec-2] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:18:48 [http-nio-8080-exec-2] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:18:48 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:18:48 [http-nio-8080-exec-2] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:18:48 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:18:48.344497600, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:18:48 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:18:48.344497600, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:18:48 [http-nio-8080-exec-2] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:18:48 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:48 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:18:48 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:18:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:18:48 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:48 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@853432d]]
2025-06-22 19:18:48 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:18:48 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:18:48 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:18:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:18:48 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:18:48 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@2be547fe]]
2025-06-22 19:18:48 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:19:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:19:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:19:19 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:19:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:19:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:19:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:19:19 [http-nio-8080-exec-1] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:19:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:19:19.541252900, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:19:19 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:19:19.541252900, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:19:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:19:19 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:19:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:19:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:19:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:19:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:19:20 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:19:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:19:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:19:20 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:19:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:19:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:19:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:19:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:19:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:19:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:19:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:19:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:19:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:19:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:19:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:19:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:19:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:19:20 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:19:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@69566f7a]]
2025-06-22 19:19:20 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@4e7abe38]]
2025-06-22 19:19:20 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:19:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:19:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:19:35 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:19:35 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:19:35 [http-nio-8080-exec-4] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:19:35 [http-nio-8080-exec-4] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:19:35 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:19:35 [http-nio-8080-exec-4] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:19:35 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:19:35.825115900, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:19:35 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:19:35.825115900, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:19:35 [http-nio-8080-exec-4] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:19:35 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:19:36 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:19:36 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:19:36 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:19:36 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@71c21bbb]]
2025-06-22 19:19:36 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:19:37 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:19:37 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:19:37 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:19:37 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:19:37 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:19:37 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:19:37 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:19:37 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:19:37 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:19:37 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:19:37 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:19:37 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1298ef89]]
2025-06-22 19:19:37 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:20:12 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:12 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:20:12 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:20:12 [http-nio-8080-exec-4] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:20:12 [http-nio-8080-exec-4] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:20:12 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:20:12 [http-nio-8080-exec-4] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:20:12 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:20:12.281706300, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:20:12 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:20:12.281706300, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:20:12 [http-nio-8080-exec-4] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:20:12 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:20:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:20:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:20:13 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:20:13 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:20:13 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:20:13 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:20:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:20:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:20:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:20:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:20:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:20:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:20:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:20:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:20:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:20:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:20:13 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:20:13 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:20:13 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@219e1fe6]]
2025-06-22 19:20:13 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@742a2b1b]]
2025-06-22 19:20:13 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:20:13 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:20:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:20:29 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:20:29 [http-nio-8080-exec-3] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:20:29 [http-nio-8080-exec-3] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:20:29 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:20:29 [http-nio-8080-exec-3] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:20:29 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:20:29.053929400, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:20:29 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:20:29.053929400, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:20:29 [http-nio-8080-exec-3] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:20:29 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:20:30 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:30 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:20:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:20:30 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:20:30 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:20:30 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:20:30 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:20:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:20:30 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:20:30 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:20:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:20:30 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:30 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:20:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:20:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:20:30 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:20:30 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:20:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:20:30 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:20:30 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:20:30 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1eb5ed8a]]
2025-06-22 19:20:30 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@6331fd1f]]
2025-06-22 19:20:30 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:20:30 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:20:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:53 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:20:53 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:20:53 [http-nio-8080-exec-9] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:20:53 [http-nio-8080-exec-9] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:20:53 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:20:53 [http-nio-8080-exec-9] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:20:53 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:20:53.772147700, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:20:53 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:20:53.772147700, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:20:53 [http-nio-8080-exec-9] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:20:53 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:20:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:20:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:20:54 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:20:54 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:20:54 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:20:54 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:20:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:20:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:20:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:20:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:20:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:20:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:20:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:20:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:20:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:20:54 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:20:54 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:20:54 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:20:54 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:20:54 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1e05964f]]
2025-06-22 19:20:54 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@2f10c6b6]]
2025-06-22 19:20:54 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:20:54 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:21:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:21:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:21:19 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:21:19 [http-nio-8080-exec-7] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:21:19 [http-nio-8080-exec-7] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:21:19 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:21:19 [http-nio-8080-exec-7] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:21:19 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:21:19.810551200, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:21:19 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:21:19.810551200, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:21:19 [http-nio-8080-exec-7] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:21:19 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:21:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:21:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:21:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:21:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:21:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:21:20 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:21:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:21:20 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:21:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:21:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:21:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:21:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:21:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:21:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:21:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:21:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:21:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:21:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:21:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:21:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:21:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:21:20 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:21:20 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@4ab86ffd]]
2025-06-22 19:21:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@7b184d33]]
2025-06-22 19:21:20 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:21:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:21:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:21:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:21:33 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:21:33 [http-nio-8080-exec-3] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:21:33 [http-nio-8080-exec-3] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:21:33 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:21:33 [http-nio-8080-exec-3] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:21:33 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:21:33.965904300, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:21:33 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:21:33.965904300, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:21:33 [http-nio-8080-exec-3] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:21:33 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:21:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:21:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:21:34 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:21:34 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:21:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:21:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:21:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:21:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:21:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:21:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:21:34 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:21:34 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@6ffc1e61]]
2025-06-22 19:21:34 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:21:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:21:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:21:35 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:21:35 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:21:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:21:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:21:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:21:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:21:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:21:35 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:21:35 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:21:35 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5716d67f]]
2025-06-22 19:21:35 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:22:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:22:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:22:13 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:22:13 [http-nio-8080-exec-9] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:22:13 [http-nio-8080-exec-9] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:22:13 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:22:13 [http-nio-8080-exec-9] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:22:13 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:22:13.676466500, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:22:13 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:22:13.676466500, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:22:13 [http-nio-8080-exec-9] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:22:13 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:22:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:22:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:22:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:22:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:22:14 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:22:14 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:22:14 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:22:14 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:22:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:22:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:22:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:22:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:22:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:22:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:22:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:22:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:22:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:22:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:22:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:22:14 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:22:14 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:22:14 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:22:14 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@2d691889]]
2025-06-22 19:22:14 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1b43e578]]
2025-06-22 19:22:14 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:22:14 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:22:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:22:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:22:30 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:22:30 [http-nio-8080-exec-1] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:22:30 [http-nio-8080-exec-1] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:22:30 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:22:30 [http-nio-8080-exec-1] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:22:30 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:22:30.481241700, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:22:30 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:22:30.481241700, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:22:30 [http-nio-8080-exec-1] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:22:30 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:22:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:22:31 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:22:31 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:22:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:22:31 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:22:31 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:22:31 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:22:31 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:22:31 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:22:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:22:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:22:31 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:22:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:22:31 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:22:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:22:31 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:22:31 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:22:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:22:31 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:22:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:22:31 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:22:31 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:22:31 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@36ccbb08]]
2025-06-22 19:22:31 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@561d1c8c]]
2025-06-22 19:22:31 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:22:31 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:10 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:23:10 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:23:10 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:23:10 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:23:10 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@33eae96, com.example.demo.entity.Cartoon@2fbc49fa, com.example.demo (truncated)...]
2025-06-22 19:23:10 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:10 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3", parameters={}
2025-06-22 19:23:10 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:23:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:23:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:23:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:23:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:23:10 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:23:10 [http-nio-8080-exec-4] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:23:10 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:23:10 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@24339e58, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:23:10 [http-nio-8080-exec-4] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:23:10 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:23:10 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:10 [http-nio-8080-exec-4] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:23:10 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:23:10.734871700, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:23:10 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:23:10.734871700, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:23:10 [http-nio-8080-exec-4] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:23:10 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:23:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:23:11 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:23:11 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:23:11 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:23:11 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:23:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:23:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:23:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:23:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:23:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:23:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:23:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:23:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:23:11 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:23:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:23:11 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:23:11 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:23:11 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@274588e2]]
2025-06-22 19:23:11 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1d4237ec]]
2025-06-22 19:23:11 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:11 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:19 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:23:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:23:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:23:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:23:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@5190431f, com.example.demo.entity.Cartoon@95f4354, com.example.demo (truncated)...]
2025-06-22 19:23:19 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:19 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3", parameters={}
2025-06-22 19:23:19 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:23:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:23:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:23:19 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:23:19 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:23:19 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@22baaada, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:23:19 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:23:19 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:19 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:23:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:23:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:23:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:23:19 [http-nio-8080-exec-5] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:23:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:23:19.879819700, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:23:19 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:23:19.879819700, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:23:19 [http-nio-8080-exec-5] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:23:19 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:20 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:20 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:23:20 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:23:20 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:23:20 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:23:20 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:23:20 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:20 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:23:20 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:23:20 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:23:20 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:23:20 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@75376fd3]]
2025-06-22 19:23:20 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:23:21 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:23:21 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:23:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:23:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:23:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:23:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:23:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:23:21 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:23:21 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@6ba32ae2]]
2025-06-22 19:23:21 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:49 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:23:49 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:23:49 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:23:49 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:23:49 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@5cbadd16, com.example.demo.entity.Cartoon@58c104ab, com.example.dem (truncated)...]
2025-06-22 19:23:49 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:49 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3", parameters={}
2025-06-22 19:23:49 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:23:49 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:23:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:49 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:23:49 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:23:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:23:49 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:23:49 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@231fcc24, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:23:49 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:23:49 [http-nio-8080-exec-6] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:23:49 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:49 [http-nio-8080-exec-6] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:23:49 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:23:49 [http-nio-8080-exec-6] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:23:49 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:23:49.249520800, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:23:49 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:23:49.249520800, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:23:49 [http-nio-8080-exec-6] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:23:49 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:50 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:50 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:23:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:23:50 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:23:50 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:23:50 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:23:50 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:23:50 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:23:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:23:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:23:50 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:23:50 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:23:50 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:23:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:23:50 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:23:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:23:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:23:50 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:23:50 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:23:50 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:23:50 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@407e7fea]]
2025-06-22 19:23:50 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5036ad31]]
2025-06-22 19:23:50 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:23:50 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:06 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:24:06 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:24:06 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:24:06 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:24:06 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@2c0ec9d9, com.example.demo.entity.Cartoon@3ee37f3f, com.example.dem (truncated)...]
2025-06-22 19:24:06 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:06 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3", parameters={}
2025-06-22 19:24:06 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:24:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:24:06 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:24:06 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:24:06 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:24:06 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:24:06 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@2f6bfb8c, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:24:06 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:24:06 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:06 [http-nio-8080-exec-2] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:24:06 [http-nio-8080-exec-2] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:24:06 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:24:06 [http-nio-8080-exec-2] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:24:06 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:24:06.798725900, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:24:06 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:24:06.798725900, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:24:06 [http-nio-8080-exec-2] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:24:06 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:24:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:24:07 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:24:07 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:24:07 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:24:07 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:24:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:24:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:24:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:24:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:24:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:24:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:24:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:24:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:24:07 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:24:07 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:24:07 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:24:07 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:24:07 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@31d2638a]]
2025-06-22 19:24:07 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@6ba94107]]
2025-06-22 19:24:07 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:07 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:38 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:24:38 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:24:38 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:24:38 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:24:38 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@468deaa6, com.example.demo.entity.Cartoon@43da605f, com.example.dem (truncated)...]
2025-06-22 19:24:38 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:38 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3", parameters={}
2025-06-22 19:24:38 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:24:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:24:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:24:38 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:24:38 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:24:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:24:38 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@20140707, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:24:38 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:38 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:24:38 [http-nio-8080-exec-1] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:24:38 [http-nio-8080-exec-1] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:24:38 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:24:38 [http-nio-8080-exec-1] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:24:38 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:24:38.996074800, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:24:38 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:24:38.996074800, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:24:38 [http-nio-8080-exec-1] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:24:38 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:24:39 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:24:39 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:24:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:24:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:24:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:24:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:24:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:24:39 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:24:39 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5c8f6054]]
2025-06-22 19:24:39 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:24:40 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:24:40 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:24:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:24:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:24:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:24:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:24:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:24:40 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:24:40 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@42bd5467]]
2025-06-22 19:24:40 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:58 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:24:58 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:24:58 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:24:58 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:24:58 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@16b45357, com.example.demo.entity.Cartoon@625f73a2, com.example.dem (truncated)...]
2025-06-22 19:24:58 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:58 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3", parameters={}
2025-06-22 19:24:58 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:24:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:24:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:24:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:24:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:24:58 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:24:58 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@1b5045a7, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:24:58 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:58 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:24:58 [http-nio-8080-exec-4] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:24:58 [http-nio-8080-exec-4] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:24:58 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:24:58 [http-nio-8080-exec-4] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:24:58 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:24:58.325607400, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:24:58 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:24:58.325607400, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:24:58 [http-nio-8080-exec-4] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:24:58 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:24:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:24:59 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:24:59 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:24:59 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:24:59 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:24:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:24:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:24:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:24:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:24:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:24:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:24:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:24:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:24:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:24:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:24:59 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:24:59 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:24:59 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1de5c1c2]]
2025-06-22 19:24:59 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:24:59 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@32c3b99b]]
2025-06-22 19:24:59 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:24:59 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:00 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:25:00 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:25:00 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:25:00 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:25:00 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@461dc1a9, com.example.demo.entity.Cartoon@7b69413d, com.example.dem (truncated)...]
2025-06-22 19:25:00 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:00 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3", parameters={}
2025-06-22 19:25:00 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:25:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:25:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:25:00 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:00 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@4d9944cc, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:25:00 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:00 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:00 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:25:00 [http-nio-8080-exec-8] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:25:00 [http-nio-8080-exec-8] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:25:00 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:25:00 [http-nio-8080-exec-8] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:25:00 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:25:00.967652, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:25:00 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:25:00.967652, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:25:00 [http-nio-8080-exec-8] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:25:00 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:01 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:25:01 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:25:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:25:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:01 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:01 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:01 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@65a6703e]]
2025-06-22 19:25:01 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:02 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:25:02 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:25:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:25:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:02 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:02 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:02 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@52bac765]]
2025-06-22 19:25:02 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:04 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:25:04 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:25:04 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:25:04 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:25:04 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@4b397330, com.example.demo.entity.Cartoon@52e89469, com.example.dem (truncated)...]
2025-06-22 19:25:04 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:05 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3", parameters={}
2025-06-22 19:25:05 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:25:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:25:05 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:25:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:05 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:05 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@33a930c7, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:25:05 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:25:05 [http-nio-8080-exec-5] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:25:05 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:05 [http-nio-8080-exec-5] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:25:05 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:25:05 [http-nio-8080-exec-5] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:25:05 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:25:05.055670500, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:25:05 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:25:05.055670500, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:25:05 [http-nio-8080-exec-5] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:25:05 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:05 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:25:05 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:25:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:25:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:05 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:05 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:05 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@32d0c175]]
2025-06-22 19:25:05 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:05 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:25:05 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:25:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:25:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:05 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:05 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@224da7d7]]
2025-06-22 19:25:05 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:16 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/3/comments", parameters={}
2025-06-22 19:25:16 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#createComment(Long, Map)
2025-06-22 19:25:16 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{content=1, rating=5}]
2025-06-22 19:25:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.demo.entity.Comment */insert 
    into
        comments (cartoon_id, content, created_at, parent_id, rating, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-06-22 19:25:16 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:16 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{createdAt=2025-06-22T19:25:16.331368200, rating=5, id=16, content=1, username=QuangDung1204}]
2025-06-22 19:25:16 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 201 CREATED
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/comments/16/like", parameters={}
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#likeComment(Long, Map)
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{isLiked=true}]
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.cartoon_id,
        c2_0.id,
        c2_0.actors,
        c2_0.created_at,
        c2_0.description,
        c2_0.director,
        c2_0.duration,
        c2_0.genre,
        c2_0.image_url,
        c2_0.release_year,
        c2_0.status,
        c2_0.title,
        c2_0.total_episodes,
        c2_0.trailer_url,
        c2_0.video_url,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        c3_0.id,
        c3_0.actors,
        c3_0.created_at,
        c3_0.description,
        c3_0.director,
        c3_0.duration,
        c3_0.genre,
        c3_0.image_url,
        c3_0.release_year,
        c3_0.status,
        c3_0.title,
        c3_0.total_episodes,
        c3_0.trailer_url,
        c3_0.video_url,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    join
        cartoonn c2_0 
            on c2_0.id=c1_0.cartoon_id 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        cartoonn c3_0 
            on c3_0.id=pc1_0.cartoon_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.id=?
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.comment_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.user_id 
    from
        comment_likes cl1_0 
    where
        cl1_0.comment_id=? 
        and cl1_0.user_id=?
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.demo.entity.CommentLike */insert 
    into
        comment_likes (comment_id, created_at, is_liked, user_id) 
    values
        (?, ?, ?, ?)
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.comment_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.user_id 
    from
        comment_likes cl1_0 
    where
        cl1_0.comment_id=? 
        and cl1_0.user_id=?
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{isDisliked=false, dislikeCount=0, isLiked=true, likeCount=1}]
2025-06-22 19:25:17 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@2441020d, com.example.demo.dto.CommentDTO@5ca1ea6b]]
2025-06-22 19:25:17 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/comments/3/like", parameters={}
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#likeComment(Long, Map)
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{isLiked=true}]
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.cartoon_id,
        c2_0.id,
        c2_0.actors,
        c2_0.created_at,
        c2_0.description,
        c2_0.director,
        c2_0.duration,
        c2_0.genre,
        c2_0.image_url,
        c2_0.release_year,
        c2_0.status,
        c2_0.title,
        c2_0.total_episodes,
        c2_0.trailer_url,
        c2_0.video_url,
        c1_0.content,
        c1_0.created_at,
        pc1_0.id,
        pc1_0.cartoon_id,
        c3_0.id,
        c3_0.actors,
        c3_0.created_at,
        c3_0.description,
        c3_0.director,
        c3_0.duration,
        c3_0.genre,
        c3_0.image_url,
        c3_0.release_year,
        c3_0.status,
        c3_0.title,
        c3_0.total_episodes,
        c3_0.trailer_url,
        c3_0.video_url,
        pc1_0.content,
        pc1_0.created_at,
        pc1_0.parent_id,
        pc1_0.rating,
        pc1_0.updated_at,
        pc1_0.user_id,
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username,
        c1_0.rating,
        c1_0.updated_at,
        c1_0.user_id,
        u2_0.id,
        u2_0.avatar,
        u2_0.ban_comment_until,
        u2_0.created_at,
        u2_0.date_of_birth,
        u2_0.email,
        u2_0.enabled,
        u2_0.full_name,
        u2_0.gender,
        u2_0.password,
        u2_0.phone,
        u2_0.role,
        u2_0.username 
    from
        comments c1_0 
    join
        cartoonn c2_0 
            on c2_0.id=c1_0.cartoon_id 
    left join
        comments pc1_0 
            on pc1_0.id=c1_0.parent_id 
    left join
        cartoonn c3_0 
            on c3_0.id=pc1_0.cartoon_id 
    left join
        users u1_0 
            on u1_0.id=pc1_0.user_id 
    join
        users u2_0 
            on u2_0.id=c1_0.user_id 
    where
        c1_0.id=?
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.comment_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.user_id 
    from
        comment_likes cl1_0 
    where
        cl1_0.comment_id=? 
        and cl1_0.user_id=?
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.demo.entity.CommentLike */insert 
    into
        comment_likes (comment_id, created_at, is_liked, user_id) 
    values
        (?, ?, ?, ?)
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.comment_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.user_id 
    from
        comment_likes cl1_0 
    where
        cl1_0.comment_id=? 
        and cl1_0.user_id=?
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{isDisliked=false, dislikeCount=0, isLiked=true, likeCount=1}]
2025-06-22 19:25:18 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@23357c5a, com.example.demo.dto.CommentDTO@5986c272]]
2025-06-22 19:25:18 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/3/like", parameters={}
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#likeCartoon(Long, Map)
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{isLiked=true}]
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.cartoon_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.updated_at,
        cl1_0.user_id 
    from
        cartoon_likes cl1_0 
    where
        cl1_0.cartoon_id=? 
        and cl1_0.user_id=?
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.demo.entity.CartoonLike */insert 
    into
        cartoon_likes (cartoon_id, created_at, is_liked, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        cl.isLiked 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.user = :user */ select
            cl1_0.is_liked 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.user_id=?
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{isDisliked=false, dislikeCount=0, isLiked=true, likeCount=1}]
2025-06-22 19:25:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:19 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:25:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:25:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:25:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:25:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@2dc10372, com.example.demo.entity.Cartoon@3c328b08, com.example.dem (truncated)...]
2025-06-22 19:25:19 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:19 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3", parameters={}
2025-06-22 19:25:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:25:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:25:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:25:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@a155526, isDisliked=false, dislikeCount=0, isLiked=false, l (truncated)...]
2025-06-22 19:25:19 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:19 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/like-status", parameters={}
2025-06-22 19:25:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:25:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:25:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:25:19 [http-nio-8080-exec-10] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/3/like-status: No static resource api/cartoons/3/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:25:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/3/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:25:19.818176, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:25:19 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:25:19.818176, path=/api/cartoons/3/like-status, developerMessage=No static resource api/cartoons/3/like-status.}]
2025-06-22 19:25:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:25:19 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1c74fe50, com.example.demo.dto.CommentDTO@12a87b6c]]
2025-06-22 19:25:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/3/comments", parameters={}
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@793cce8, com.example.demo.dto.CommentDTO@4c4f9d7e]]
2025-06-22 19:25:20 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:39 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:25:39 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:25:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:39 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:39 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:39 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@562664a5, com.example.demo.entity.Cartoon@6b4ba78d, com.example.dem (truncated)...]
2025-06-22 19:25:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:39 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications", parameters={}
2025-06-22 19:25:39 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:39 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getNotifications()
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:25:39 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications/unread-count", parameters={}
2025-06-22 19:25:39 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getUnreadCount()
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/user-achievements/username/QuangDung1204/check-achievements", parameters={}
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#checkAchievementsByUsername(String)
2025-06-22 19:25:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:39 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(n) 
    FROM
        Notification n 
    WHERE
        n.user = :user 
        AND n.isRead = false */ select
            count(n1_0.id) 
        from
            notifications n1_0 
        where
            n1_0.user_id=? 
            and n1_0.is_read=0
2025-06-22 19:25:39 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.user_id 
    from
        notifications n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:39 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:39 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[]]
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:25:39 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [0]
2025-06-22 19:25:39 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:39 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{message=Achievements checked and updated, userId=13, success=true}]
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:25:39 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:25:40 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:40 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:25:40 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:25:40 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:25:40 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:25:40 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@9725453, com.example.demo.entity.Cartoon@2cf37cfb, com.example.demo (truncated)...]
2025-06-22 19:25:40 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:40 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:25:40 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:25:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:25:40 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:25:40 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:40 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@dd1f1d1, isDisliked=false, dislikeCount=0, isLiked=false, l (truncated)...]
2025-06-22 19:25:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:40 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:40 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:25:40 [http-nio-8080-exec-1] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:25:40 [http-nio-8080-exec-1] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:25:40 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:25:40 [http-nio-8080-exec-1] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:25:40 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:25:40.390571600, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:25:40 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:25:40.390571600, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:25:40 [http-nio-8080-exec-1] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:25:40 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1f2d6e70, com.example.demo.dto.CommentDTO@406ec98a, com.example.dem (truncated)...]
2025-06-22 19:25:40 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@2d63eee4, com.example.demo.dto.CommentDTO@38452bc2, com.example.dem (truncated)...]
2025-06-22 19:25:40 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:15 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:27:15 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:27:15 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:27:15 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:27:15 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@45a5829a, com.example.demo.entity.Cartoon@6822441c, com.example.dem (truncated)...]
2025-06-22 19:27:15 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:15 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:27:15 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:27:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:27:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:27:15 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:27:15 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:27:15 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@30bf2097, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:27:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:27:15 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:15 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:27:15 [http-nio-8080-exec-10] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:27:15 [http-nio-8080-exec-10] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:27:15 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:27:15 [http-nio-8080-exec-10] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:27:15 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:27:15.664257700, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:27:15 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:27:15.664257700, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:27:15 [http-nio-8080-exec-10] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:27:15 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@af7abb, com.example.demo.dto.CommentDTO@37ddc469, com.example.demo. (truncated)...]
2025-06-22 19:27:16 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@90d4b2d, com.example.demo.dto.CommentDTO@2fe739f, com.example.demo. (truncated)...]
2025-06-22 19:27:16 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:19 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:27:19 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:27:19 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:27:19 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:27:19 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@6bd56f9a, com.example.demo.entity.Cartoon@7346eaa5, com.example.dem (truncated)...]
2025-06-22 19:27:19 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:19 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:27:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:27:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:27:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:27:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:27:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:27:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:27:19 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:27:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@49990fc1, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:27:19 [http-nio-8080-exec-7] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:27:19 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:19 [http-nio-8080-exec-7] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:27:19 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:27:19 [http-nio-8080-exec-7] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:27:19 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:27:19.482237100, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:27:19 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:27:19.482237100, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:27:19 [http-nio-8080-exec-7] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:27:19 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@62e9c0ee, com.example.demo.dto.CommentDTO@55eec759, com.example.dem (truncated)...]
2025-06-22 19:27:20 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@2d4bf72, com.example.demo.dto.CommentDTO@5ed2f8e5, com.example.demo (truncated)...]
2025-06-22 19:27:20 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:28 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:27:28 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:27:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:27:28 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:27:28 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@37247120, com.example.demo.entity.Cartoon@37aae12, com.example.demo (truncated)...]
2025-06-22 19:27:28 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:28 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:27:28 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:27:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:27:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:27:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:27:28 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:27:28 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:27:28 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@2f41df57, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:27:28 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:28 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:27:28 [http-nio-8080-exec-8] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:27:28 [http-nio-8080-exec-8] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:27:28 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:27:28 [http-nio-8080-exec-8] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:27:28 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:27:28.689767800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:27:28 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:27:28.689767800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:27:28 [http-nio-8080-exec-8] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:27:28 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@62dbba0e, com.example.demo.dto.CommentDTO@51764bdd, com.example.dem (truncated)...]
2025-06-22 19:27:29 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5bbf9637, com.example.demo.dto.CommentDTO@6fba4d08, com.example.dem (truncated)...]
2025-06-22 19:27:29 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:28:21 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:28:21 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:28:21 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:28:21 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:28:21 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@43665a69, com.example.demo.entity.Cartoon@114da25a, com.example.dem (truncated)...]
2025-06-22 19:28:21 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:28:21 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:28:21 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:28:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:28:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:28:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:28:21 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:28:21 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:28:21 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:28:21 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@25178584, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:28:21 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:28:21 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:28:21 [http-nio-8080-exec-5] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:28:21 [http-nio-8080-exec-5] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:28:21 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:28:21 [http-nio-8080-exec-5] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:28:21 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:28:21.679104400, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:28:21 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:28:21.679104400, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:28:21 [http-nio-8080-exec-5] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:28:21 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@61adbeaa, com.example.demo.dto.CommentDTO@60e0985c, com.example.dem (truncated)...]
2025-06-22 19:28:22 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@e39a813, com.example.demo.dto.CommentDTO@3bf22b, com.example.demo.d (truncated)...]
2025-06-22 19:28:22 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:29:19 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:29:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:29:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:29:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:29:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@59807754, com.example.demo.entity.Cartoon@549c09e1, com.example.dem (truncated)...]
2025-06-22 19:29:19 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:29:19 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:29:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:29:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:29:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:29:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:29:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:29:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:29:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:29:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@2ccbecdd, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:29:19 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:29:19 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:29:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:29:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:29:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:29:19 [http-nio-8080-exec-2] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:29:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:29:19.528005200, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:29:19 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:29:19.528005200, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:29:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:29:19 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@72e2d6b6, com.example.demo.dto.CommentDTO@ba80afb, com.example.demo (truncated)...]
2025-06-22 19:29:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@44aaeb22, com.example.demo.dto.CommentDTO@4f238507, com.example.dem (truncated)...]
2025-06-22 19:29:20 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:30:55 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:30:55 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:30:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:30:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:30:55 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:30:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:30:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:30:55 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:30:55 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@1c14d766, com.example.demo.entity.Cartoon@527d212e, com.example.dem (truncated)...]
2025-06-22 19:30:55 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications", parameters={}
2025-06-22 19:30:55 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/notifications/unread-count", parameters={}
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:30:55 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/user-achievements/username/QuangDung1204/check-achievements", parameters={}
2025-06-22 19:30:55 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getNotifications()
2025-06-22 19:30:55 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.NotificationController#getUnreadCount()
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#checkAchievementsByUsername(String)
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:30:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:30:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:30:55 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(n) 
    FROM
        Notification n 
    WHERE
        n.user = :user 
        AND n.isRead = false */ select
            count(n1_0.id) 
        from
            notifications n1_0 
        where
            n1_0.user_id=? 
            and n1_0.is_read=0
2025-06-22 19:30:55 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.user_id 
    from
        notifications n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:30:55 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:30:55 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[]]
2025-06-22 19:30:55 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [0]
2025-06-22 19:30:55 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:30:55 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0 
    where
        a1_0.id=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [{message=Achievements checked and updated, userId=13, success=true}]
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:30:55 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/user-achievements/username/QuangDung1204/detailed-progress", parameters={}
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.api.UserAchievementRestController#getDetailedProgressByUsername(String)
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        a1_0.id,
        a1_0.description,
        a1_0.name 
    from
        achievements a1_0
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        ua1_0.id,
        ua1_0.achievement_id,
        ua1_0.user_id 
    from
        user_achievements ua1_0 
    where
        ua1_0.user_id=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        uwh1_0.id,
        uwh1_0.cartoon_id,
        uwh1_0.user_id,
        uwh1_0.watched_at 
    from
        user_watch_history uwh1_0 
    where
        uwh1_0.user_id=?
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Writing [[{current=0, name=Xem 10 phim, icon=🎬, description=Xem đủ 10 bộ phim bất kỳ, progressPercent=0, id= (truncated)...]
2025-06-22 19:30:56 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:31:01 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:31:01 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:31:01 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:31:01 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:31:01 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@2f84cf42, com.example.demo.entity.Cartoon@23989dfe, com.example.dem (truncated)...]
2025-06-22 19:31:01 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:31:01 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:31:01 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:31:01 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:31:01 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:31:01 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:31:01 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:31:01 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:31:01 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:31:01 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@780a4298, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:31:01 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:31:01 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:31:01 [http-nio-8080-exec-8] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:31:01 [http-nio-8080-exec-8] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:31:01 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:31:01 [http-nio-8080-exec-8] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:31:01 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:31:01.797723500, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:31:01 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:31:01.797723500, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:31:01 [http-nio-8080-exec-8] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:31:01 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@77da7ea0, com.example.demo.dto.CommentDTO@4aeaa28d, com.example.dem (truncated)...]
2025-06-22 19:31:02 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@3fe5019a, com.example.demo.dto.CommentDTO@74096e0e, com.example.dem (truncated)...]
2025-06-22 19:31:02 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/2/like", parameters={}
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#likeCartoon(Long, Map)
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{isLiked=true}]
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.cartoon_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.updated_at,
        cl1_0.user_id 
    from
        cartoon_likes cl1_0 
    where
        cl1_0.cartoon_id=? 
        and cl1_0.user_id=?
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* delete for com.example.demo.entity.CartoonLike */delete 
    from
        cartoon_likes 
    where
        id=?
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        cl.isLiked 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.user = :user */ select
            cl1_0.is_liked 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.user_id=?
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{isDisliked=false, dislikeCount=0, isLiked=false, likeCount=0}]
2025-06-22 19:31:03 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - POST "/api/cartoons/2/like", parameters={}
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#likeCartoon(Long, Map)
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Read "application/json;charset=UTF-8" to [{isLiked=true}]
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        cl1_0.id,
        cl1_0.cartoon_id,
        cl1_0.created_at,
        cl1_0.is_liked,
        cl1_0.updated_at,
        cl1_0.user_id 
    from
        cartoon_likes cl1_0 
    where
        cl1_0.cartoon_id=? 
        and cl1_0.user_id=?
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* insert for
        com.example.demo.entity.CartoonLike */insert 
    into
        cartoon_likes (cartoon_id, created_at, is_liked, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?)
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        cl.isLiked 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.user = :user */ select
            cl1_0.is_liked 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.user_id=?
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{isDisliked=false, dislikeCount=0, isLiked=true, likeCount=1}]
2025-06-22 19:31:04 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:19 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:32:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:32:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:32:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:32:19 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@47c02065, com.example.demo.entity.Cartoon@5ff4da8, com.example.demo (truncated)...]
2025-06-22 19:32:19 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:19 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:32:19 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:32:19 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:32:19 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:32:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:19 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:32:19 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:32:19 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:32:19 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@674aa491, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:32:19 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:19 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:32:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:32:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:32:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:32:19 [http-nio-8080-exec-9] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:32:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:32:19.640648500, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:32:19 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:32:19.640648500, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:32:19 [http-nio-8080-exec-9] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:32:19 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@51ea67cd, com.example.demo.dto.CommentDTO@54aceeab, com.example.dem (truncated)...]
2025-06-22 19:32:20 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5398ba1e, com.example.demo.dto.CommentDTO@48524731, com.example.dem (truncated)...]
2025-06-22 19:32:20 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:26 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:32:26 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:32:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:32:26 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:32:26 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@43165b0a, com.example.demo.entity.Cartoon@666fe9f3, com.example.dem (truncated)...]
2025-06-22 19:32:26 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:26 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:32:26 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:32:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:32:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:32:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:32:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:32:26 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:32:26 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:32:26 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@74254009, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:32:26 [http-nio-8080-exec-7] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:32:26 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:26 [http-nio-8080-exec-7] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:32:26 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:32:26 [http-nio-8080-exec-7] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:32:26 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:32:26.619695800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:32:26 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:32:26.619695800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:32:26 [http-nio-8080-exec-7] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:32:26 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@62b6589d, com.example.demo.dto.CommentDTO@1a83c082, com.example.dem (truncated)...]
2025-06-22 19:32:27 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@7bf3e39e, com.example.demo.dto.CommentDTO@45415618, com.example.dem (truncated)...]
2025-06-22 19:32:27 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:44 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:32:44 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:32:44 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:32:44 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:32:44 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@7b65bfa2, com.example.demo.entity.Cartoon@7ac2de65, com.example.dem (truncated)...]
2025-06-22 19:32:44 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:44 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:32:44 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:32:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:32:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:32:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:32:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:32:44 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:32:44 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@4f07d2c3, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:32:44 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:32:44 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:44 [http-nio-8080-exec-6] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:32:44 [http-nio-8080-exec-6] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:32:44 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:32:44 [http-nio-8080-exec-6] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:32:44 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:32:44.587311800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:32:44 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:32:44.587311800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:32:44 [http-nio-8080-exec-6] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:32:44 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1eae80e2, com.example.demo.dto.CommentDTO@60854dc1, com.example.dem (truncated)...]
2025-06-22 19:32:45 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@139231ea, com.example.demo.dto.CommentDTO@74b79df3, com.example.dem (truncated)...]
2025-06-22 19:32:45 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:02 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:33:02 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:33:02 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:33:02 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:33:02 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@414a5bc0, com.example.demo.entity.Cartoon@61c30cbf, com.example.dem (truncated)...]
2025-06-22 19:33:02 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:03 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:33:03 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:33:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:33:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:33:03 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:33:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:33:03 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:33:03 [http-nio-8080-exec-4] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:33:03 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:33:03 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@5b8bb4c0, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:33:03 [http-nio-8080-exec-4] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:33:03 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:03 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:33:03 [http-nio-8080-exec-4] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:33:03 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:33:03.032421600, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:33:03 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:33:03.032421600, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:33:03 [http-nio-8080-exec-4] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:33:03 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@7490be04, com.example.demo.dto.CommentDTO@7098a087, com.example.dem (truncated)...]
2025-06-22 19:33:04 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@4e8490b0, com.example.demo.dto.CommentDTO@397c2143, com.example.dem (truncated)...]
2025-06-22 19:33:04 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:14 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:33:14 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:33:14 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:33:14 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:33:14 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@220829b3, com.example.demo.entity.Cartoon@50762178, com.example.dem (truncated)...]
2025-06-22 19:33:14 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:14 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:33:14 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:33:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:33:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:33:14 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:33:14 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:33:14 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:33:14 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:33:14 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@6f752a80, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:33:14 [http-nio-8080-exec-10] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:33:14 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:14 [http-nio-8080-exec-10] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:33:14 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:33:14 [http-nio-8080-exec-10] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:33:14 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:33:14.147929900, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:33:14 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:33:14.147929900, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:33:14 [http-nio-8080-exec-10] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:33:14 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@2046b089, com.example.demo.dto.CommentDTO@3750a71c, com.example.dem (truncated)...]
2025-06-22 19:33:15 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@141d27bf, com.example.demo.dto.CommentDTO@3f8aa932, com.example.dem (truncated)...]
2025-06-22 19:33:15 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:25 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:33:25 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:33:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:33:25 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:33:25 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@3b37ccfd, com.example.demo.entity.Cartoon@1091f206, com.example.dem (truncated)...]
2025-06-22 19:33:25 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:25 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:33:25 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:33:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:33:25 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:33:25 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:33:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:33:25 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:33:25 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:33:25 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@4ae3c08, isDisliked=false, dislikeCount=0, isLiked=false, l (truncated)...]
2025-06-22 19:33:25 [http-nio-8080-exec-5] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:33:25 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:25 [http-nio-8080-exec-5] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:33:25 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:33:25 [http-nio-8080-exec-5] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:33:25 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:33:25.810159800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:33:25 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:33:25.810159800, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:33:25 [http-nio-8080-exec-5] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:33:25 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5e86160e, com.example.demo.dto.CommentDTO@330bfa3e, com.example.dem (truncated)...]
2025-06-22 19:33:26 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@405628d7, com.example.demo.dto.CommentDTO@2e050059, com.example.dem (truncated)...]
2025-06-22 19:33:26 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:42 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:33:42 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:33:42 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:33:42 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:33:42 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@7e48f98a, com.example.demo.entity.Cartoon@1540925d, com.example.dem (truncated)...]
2025-06-22 19:33:42 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:42 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:33:42 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:33:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:33:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:33:42 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:33:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:33:42 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:33:42 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@285226ba, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:33:42 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:33:42 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:42 [http-nio-8080-exec-3] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:33:42 [http-nio-8080-exec-3] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:33:42 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:33:42 [http-nio-8080-exec-3] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:33:42 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:33:42.843269300, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:33:42 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:33:42.843269300, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:33:42 [http-nio-8080-exec-3] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:33:42 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5c8ca934, com.example.demo.dto.CommentDTO@1d7a7ed7, com.example.dem (truncated)...]
2025-06-22 19:33:43 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@67c34103, com.example.demo.dto.CommentDTO@7aedd22d, com.example.dem (truncated)...]
2025-06-22 19:33:44 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:34:19 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:34:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:34:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:34:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:34:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@49a7b46a, com.example.demo.entity.Cartoon@baf29fd, com.example.demo (truncated)...]
2025-06-22 19:34:19 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:34:19 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:34:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:34:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:34:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:34:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:34:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:34:19 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:34:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:34:19 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/like-status", parameters={}
2025-06-22 19:34:19 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@2b4a49c6, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:34:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.h.SimpleUrlHandlerMapping - Mapped to ResourceHttpRequestHandler [classpath [static/], ServletContext [/]]
2025-06-22 19:34:19 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:34:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.r.ResourceHttpRequestHandler - Resource not found
2025-06-22 19:34:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Using @ExceptionHandler com.example.demo.exception.GlobalExceptionHandler#handleGenericException(Exception, HttpServletRequest)
2025-06-22 19:34:19 [http-nio-8080-exec-6] ERROR c.e.d.e.GlobalExceptionHandler - Unhandled exception occurred at /api/cartoons/2/like-status: No static resource api/cartoons/2/like-status.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at com.example.demo.config.CustomTokenAuthenticationFilter.doFilterInternal(CustomTokenAuthenticationFilter.java:57)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-22 19:34:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/cartoons/2/like-status.] to ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:34:19.643215, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:34:19 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Using resolved error view: ModelAndView [view="error"; model={status=500, error=Internal Server Error, message=An unexpected error occurred. Please contact support if the problem persists., timestamp=2025-06-22T19:34:19.643215, path=/api/cartoons/2/like-status, developerMessage=No static resource api/cartoons/2/like-status.}]
2025-06-22 19:34:19 [http-nio-8080-exec-6] DEBUG o.s.w.s.v.ContentNegotiatingViewResolver - Selected '*/*' given [*/*]
2025-06-22 19:34:19 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@9b4d84, com.example.demo.dto.CommentDTO@5f1d4a00, com.example.demo. (truncated)...]
2025-06-22 19:34:20 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@c81be9c, com.example.demo.dto.CommentDTO@5d832a1, com.example.demo. (truncated)...]
2025-06-22 19:34:20 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:36:09 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:36:09 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:36:09 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:36:09 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:36:09 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@fdd0085, com.example.demo.entity.Cartoon@4f7e6784, com.example.demo (truncated)...]
2025-06-22 19:36:09 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:36:09 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:36:09 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:36:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:36:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:36:09 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:36:09 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:36:09 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@de34ce2, isDisliked=false, dislikeCount=0, isLiked=false, l (truncated)...]
2025-06-22 19:36:09 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@4b11d12f, com.example.demo.dto.CommentDTO@6db95934, com.example.dem (truncated)...]
2025-06-22 19:36:10 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@6d98b95b, com.example.demo.dto.CommentDTO@57de6ab4, com.example.dem (truncated)...]
2025-06-22 19:36:10 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:36:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:36:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:36:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:36:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:36:19 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@3bc8127f, com.example.demo.entity.Cartoon@4e91226e, com.example.dem (truncated)...]
2025-06-22 19:36:19 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:36:19 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:36:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:36:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:36:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:36:19 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:36:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:36:19 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@40968d32, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:36:19 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@2ba6c16b, com.example.demo.dto.CommentDTO@2ec65c28, com.example.dem (truncated)...]
2025-06-22 19:36:20 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5df7ccb6, com.example.demo.dto.CommentDTO@2c49ae82, com.example.dem (truncated)...]
2025-06-22 19:36:20 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:36:40 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:36:40 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:36:40 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:36:40 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:36:40 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@541fe33f, com.example.demo.entity.Cartoon@396993ab, com.example.dem (truncated)...]
2025-06-22 19:36:40 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:36:40 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:36:40 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:36:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:36:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:36:40 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:36:40 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:36:40 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@27a6bbc, isDisliked=false, dislikeCount=0, isLiked=false, l (truncated)...]
2025-06-22 19:36:40 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1e0deeeb, com.example.demo.dto.CommentDTO@1434cf0e, com.example.dem (truncated)...]
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1b49cc03, com.example.demo.dto.CommentDTO@44314dd0, com.example.dem (truncated)...]
2025-06-22 19:36:41 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:13 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:37:13 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:37:13 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:37:13 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:37:13 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@774d4825, com.example.demo.entity.Cartoon@764abe57, com.example.dem (truncated)...]
2025-06-22 19:37:13 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:13 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:37:13 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:37:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:37:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:37:13 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:37:13 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:37:13 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@6e8aa720, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:37:13 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@3590262d, com.example.demo.dto.CommentDTO@56aa9f6a, com.example.dem (truncated)...]
2025-06-22 19:37:14 [http-nio-8080-exec-8] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@1cfe30c, com.example.demo.dto.CommentDTO@3bb35588, com.example.demo (truncated)...]
2025-06-22 19:37:14 [http-nio-8080-exec-1] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:31 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:37:31 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:37:31 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:37:31 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:37:31 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@169b0d03, com.example.demo.entity.Cartoon@5880bd94, com.example.dem (truncated)...]
2025-06-22 19:37:31 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:31 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:37:31 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:37:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:37:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:37:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:37:31 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:37:31 [http-nio-8080-exec-7] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@6926ccd8, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:37:31 [http-nio-8080-exec-7] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@2266e02f, com.example.demo.dto.CommentDTO@13e03b5e, com.example.dem (truncated)...]
2025-06-22 19:37:33 [http-nio-8080-exec-9] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@4d93cf4e, com.example.demo.dto.CommentDTO@7ad5ac00, com.example.dem (truncated)...]
2025-06-22 19:37:33 [http-nio-8080-exec-5] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:44 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:37:44 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:37:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:37:44 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:37:44 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@717d0cf9, com.example.demo.entity.Cartoon@aa21e9e, com.example.demo (truncated)...]
2025-06-22 19:37:44 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:44 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:37:44 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:37:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:37:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:37:44 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:37:44 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:37:44 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@4fbcb643, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:37:44 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@44ab1d4e, com.example.demo.dto.CommentDTO@33e451df, com.example.dem (truncated)...]
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@5a20ad8c, com.example.demo.dto.CommentDTO@11980988, com.example.dem (truncated)...]
2025-06-22 19:37:45 [http-nio-8080-exec-3] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:58 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons", parameters={}
2025-06-22 19:37:58 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getAllCartoons()
2025-06-22 19:37:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0
2025-06-22 19:37:58 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [application/json] and supported [application/json, application/*+json]
2025-06-22 19:37:58 [http-nio-8080-exec-4] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.entity.Cartoon@82b5ba, com.example.demo.entity.Cartoon@27118e71, com.example.demo. (truncated)...]
2025-06-22 19:37:58 [http-nio-8080-exec-4] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:58 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2", parameters={}
2025-06-22 19:37:58 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCartoonWithStats(Long)
2025-06-22 19:37:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:37:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = true */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=1
2025-06-22 19:37:58 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CartoonLike cl 
    WHERE
        cl.cartoon = :cartoon 
        AND cl.isLiked = false */ select
            count(cl1_0.id) 
        from
            cartoon_likes cl1_0 
        where
            cl1_0.cartoon_id=? 
            and cl1_0.is_liked=0
2025-06-22 19:37:58 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:37:58 [http-nio-8080-exec-10] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [{cartoon=com.example.demo.entity.Cartoon@217dfddf, isDisliked=false, dislikeCount=0, isLiked=false,  (truncated)...]
2025-06-22 19:37:58 [http-nio-8080-exec-10] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@403d530e, com.example.demo.dto.CommentDTO@7bd517fc, com.example.dem (truncated)...]
2025-06-22 19:37:59 [http-nio-8080-exec-6] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - GET "/api/cartoons/2/comments", parameters={}
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Mapped to com.example.demo.controller.CartoonController#getCommentsWithReplies(Integer)
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.cartoon.id = :cartoonId 
        AND c.parentComment IS NULL 
    ORDER BY
        c.createdAt DESC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.cartoon_id=? 
            and c1_0.parent_id is null 
        order by
            c1_0.created_at desc
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.actors,
        c1_0.created_at,
        c1_0.description,
        c1_0.director,
        c1_0.duration,
        c1_0.genre,
        c1_0.image_url,
        c1_0.release_year,
        c1_0.status,
        c1_0.title,
        c1_0.total_episodes,
        c1_0.trailer_url,
        c1_0.video_url 
    from
        cartoonn c1_0 
    where
        c1_0.id=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        c 
    FROM
        Comment c 
    WHERE
        c.parentComment.id = :parentId 
    ORDER BY
        c.createdAt ASC */ select
            c1_0.id,
            c1_0.cartoon_id,
            c1_0.content,
            c1_0.created_at,
            c1_0.parent_id,
            c1_0.rating,
            c1_0.updated_at,
            c1_0.user_id 
        from
            comments c1_0 
        where
            c1_0.parent_id=? 
        order by
            c1_0.created_at
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.avatar,
        u1_0.ban_comment_until,
        u1_0.created_at,
        u1_0.date_of_birth,
        u1_0.email,
        u1_0.enabled,
        u1_0.full_name,
        u1_0.gender,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.id=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(cl) 
    FROM
        CommentLike cl 
    WHERE
        cl.comment = :comment 
        AND cl.isLiked = :liked */ select
            count(cl1_0.id) 
        from
            comment_likes cl1_0 
        where
            cl1_0.comment_id=? 
            and cl1_0.is_liked=?
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Using 'application/json', given [*/*] and supported [application/json, application/*+json]
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG o.s.w.s.m.m.a.HttpEntityMethodProcessor - Writing [[com.example.demo.dto.CommentDTO@7b321894, com.example.demo.dto.CommentDTO@3a9da99b, com.example.dem (truncated)...]
2025-06-22 19:37:59 [http-nio-8080-exec-2] DEBUG o.s.web.servlet.DispatcherServlet - Completed 200 OK
