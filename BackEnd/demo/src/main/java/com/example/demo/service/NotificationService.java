package com.example.demo.service;

import com.example.demo.entity.Notification;
import com.example.demo.entity.User;
import com.example.demo.repository.NotificationRepository;
import com.example.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
public class NotificationService {

    @Autowired
    private NotificationRepository notificationRepository;

    @Autowired
    private UserRepository userRepository;

    // T·∫°o th√¥ng b√°o m·ªõi
    public Notification createNotification(User user, String title, String content, Notification.NotificationType type) {
        Notification notification = new Notification(user, title, content, type);
        return notificationRepository.save(notification);
    }

    // T·∫°o th√¥ng b√°o v·ªõi ƒë·ªëi t∆∞·ª£ng li√™n quan
    public Notification createNotification(User user, String title, String content, 
                                         Notification.NotificationType type, Integer relatedId, String relatedType) {
        Notification notification = new Notification(user, title, content, type, relatedId, relatedType);
        return notificationRepository.save(notification);
    }

    // Legacy method ƒë·ªÉ t∆∞∆°ng th√≠ch
    public void sendNotification(User user, String content) {
        createNotification(user, "Th√¥ng b√°o", content, Notification.NotificationType.SYSTEM);
    }

    // L·∫•y t·∫•t c·∫£ th√¥ng b√°o c·ªßa user
    public List<Notification> getNotifications(User user) {
        return notificationRepository.findByUserOrderByCreatedAtDesc(user);
    }

    // L·∫•y th√¥ng b√°o c·ªßa user v·ªõi limit
    public List<Notification> getUserNotifications(User user, int limit) {
        return notificationRepository.findByUserWithLimit(user, PageRequest.of(0, limit));
    }

    // L·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc
    public List<Notification> getUnreadNotifications(User user) {
        return notificationRepository.findByUserAndIsReadFalseOrderByCreatedAtDesc(user);
    }

    // ƒê·∫øm s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
    public Long getUnreadCount(User user) {
        return notificationRepository.countUnreadByUser(user);
    }

    // ƒê√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
    public void markAsRead(Notification notification) {
        notification.setIsRead(true);
        notificationRepository.save(notification);
    }

    // ƒê√°nh d·∫•u th√¥ng b√°o theo ID l√† ƒë√£ ƒë·ªçc
    public void markAsRead(Integer notificationId) {
        Optional<Notification> notificationOpt = notificationRepository.findById(notificationId);
        if (notificationOpt.isPresent()) {
            Notification notification = notificationOpt.get();
            notification.setIsRead(true);
            notificationRepository.save(notification);
        }
    }

    // ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o c·ªßa user l√† ƒë√£ ƒë·ªçc
    @Transactional
    public void markAllAsRead(User user) {
        notificationRepository.markAllAsReadForUser(user, LocalDateTime.now());
    }

    // L·∫•y th√¥ng b√°o theo ID
    public Notification getById(Integer id) {
        return notificationRepository.findById(id).orElse(null);
    }

    // X√≥a th√¥ng b√°o
    public void deleteNotification(Integer notificationId) {
        notificationRepository.deleteById(notificationId);
    }

    // === HELPER METHODS FOR SPECIFIC NOTIFICATION TYPES ===

    // Th√¥ng b√°o khi c√≥ ng∆∞·ªùi like comment
    public void notifyCommentLiked(User commentOwner, User liker, Integer commentId) {
        if (!commentOwner.getId().equals(liker.getId())) { // Kh√¥ng th√¥ng b√°o cho ch√≠nh m√¨nh
            String title = "C√≥ ng∆∞·ªùi th√≠ch b√¨nh lu·∫≠n c·ªßa b·∫°n";
            String content = liker.getUsername() + " ƒë√£ th√≠ch b√¨nh lu·∫≠n c·ªßa b·∫°n";
            createNotification(commentOwner, title, content, Notification.NotificationType.LIKE, commentId, "COMMENT");
        }
    }

    // Th√¥ng b√°o khi c√≥ reply comment
    public void notifyCommentReplied(User commentOwner, User replier, Integer commentId) {
        if (!commentOwner.getId().equals(replier.getId())) {
            String title = "C√≥ ng∆∞·ªùi tr·∫£ l·ªùi b√¨nh lu·∫≠n c·ªßa b·∫°n";
            String content = replier.getUsername() + " ƒë√£ tr·∫£ l·ªùi b√¨nh lu·∫≠n c·ªßa b·∫°n";
            createNotification(commentOwner, title, content, Notification.NotificationType.REPLY, commentId, "COMMENT");
        }
    }

    // Th√¥ng b√°o khi ƒë·∫°t th√†nh t·ª±u
    public void notifyAchievementUnlocked(User user, String achievementName) {
        String title = "üéâ B·∫°n ƒë√£ m·ªü kh√≥a th√†nh t·ª±u m·ªõi!";
        String content = "Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c th√†nh t·ª±u: " + achievementName;
        createNotification(user, title, content, Notification.NotificationType.ACHIEVEMENT);
    }

    // Th√¥ng b√°o c·∫≠p nh·∫≠t profile
    public void notifyProfileUpdated(User user) {
        String title = "Th√¥ng tin c√° nh√¢n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t";
        String content = "Th√¥ng tin c√° nh√¢n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng";
        createNotification(user, title, content, Notification.NotificationType.PROFILE_UPDATE);
    }

    // Th√¥ng b√°o th√†nh c√¥ng
    public void notifySuccess(User user, String title, String content) {
        createNotification(user, title, content, Notification.NotificationType.SUCCESS);
    }

    // L·∫•y user theo ID
    public User getUserById(Integer userId) {
        return userRepository.findById(userId).orElse(null);
    }
}
